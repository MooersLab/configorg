#+TITLE: Blaine Mooers's GNU Emacs Config
#+AUTHOR: Blaine Mooers
#+DATE: 09 October 2022
#+EMAIL: blaine-mooers at ouhsc.edu
#+STARTUP:  showall



* Introduction
I followed an alternate approach to managing my /init.el/ file that was inspired by [[https://gitlab.com/dwt1/dotfiles][Derek Taylor]].
This approach involves putting the elisp code of the /init.el/ into source blocks in an org-mode file called /config.org/.
Org-mode is a specialized markup language for Emacs.
It is more powerful than vanilla markdown and less verbose than LaTeX.

The initial conversion took several hours, but the resulting /config.org/ file is much easier to maintain than the original /init.el/.
I found that I broke my /init.el/ file less frequently after making the switch to the /config.org/ file.
I might have been breaking my /init.el/ frequently because I was ignorant of the basics of Emacs lisp (elisp).
The less frequent breaking of my init.el file freed up time and mental bandwidth to learn about new Emacs packages.

Using the /config.org/ file for the configuration has several advantages.
First, the sections can be folded while editing this file in Emacs by entering TAB when the cursor or point is on the section title.
When all sections are folded, the entire document is visible in one screen.
In retrospect, you have to be a big fan of folded text to think that this is advantage.
Second, the /config.org/ file is rendered directly by GitHub; there is no need to convert it from org to GitHub markdown.
Unfortunately, the internal links in org do not work on GitHub.

** Outline
After this Intoduction, I have listed the basic configuration.
The basics are followed by the package configurations in alphabetical order.

** Commented out code
I have commented out the configuraton of some packages by using org-mode comment blocks to surround code bloacks that are not to be tangled to the /config.el/ file.
I may no longer be using that particular package, but I do not want to lose its configuration.
Or the configuration for that package needs correcting.

You can also add the DISABLED tag to some code chunks to block them from being tangled to reduce Emacs startup time.

** Roles of config.org and init.el
On startup, Emacs strips out (/tangles/ in literate programming parlance) the elisp code in the source blocks of this file and writes it to a /config.el/ file.
The /config.el/ file is the file that Emacs reads upon startup.
The /config.el/ file will be written to your Emacs directory, (e.g., ~/Users/blaine/.emacs.d~).

** chemacs
Recently, I changed my Emacs directory to ~/Users/blaine/.emacs.default~ because I was using the /chemacs2.el/ package, which allows me to switch Emacs configurations easily.
This capability allows me to explore alternate Emacs configurations without displacing my default configuration.
It also allows me to switch to a minimal configuration for continued productivity when I have broken my default configuration and do not have time to debug it.

** --init-directory
Note that if you are using Emacs version 29.0.5 from January 2022 or more recently, you can use the /--init-directory/ flag to switch profiles instead of using the /chemacs/ package.
This flag is easier to use because you to not have to setup two configuration files required by /chemacs/.
The latter can be tricky to set up and debug.

** Emacs 29
Emacs version 29.0.5 is the bleeding edge version.
I have been using the bleeding edge version for a 18 months and have not had any issues.
This might be because I am still a na$\"{i}$ve advanced beginner.

** Startup aliases
I use bash aliases to start up Emacs with specifc profiles and with or without the /--init-debug/ flag.
For example, I enter ~eid~ to launch Emacs version 29.0.5 with the default profile (i.e., the profile tangled from this file).
These are defined in a ~.bashAppAliases~ file that I source from my ~.zshenv~ file which is in turn sourced from my ~.zshrc~ startup file.

#+BEGIN_EXAMPLE
alias eib='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/emacs-brave'
alias eibd='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/emacs-brave --debug-init'

alias eic='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/crafted-emacs'
alias eicd='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/crafted-emac --debug-init'

alias eid='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/.emacs.default'
alias eidd='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/.emacs.default --debug-init'

alias eidm='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/doom-emacs'
alias eidmd='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/doom-emac --debug-init'

alias eie='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/ess-emacs'
alias eied='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/ess-emacs --debug-init'

alias eil='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/latex-emacs'
alias eild='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/latex-emacs --debug-init'

alias eis='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/scimax'
alias eisd='/Applications/Emacs29.0.5.app/Contents/MacOS/Emacs --init-directory ~/scimax --debug-init'
#+END_EXAMPLE

I use thousands of bash aliases.
They are parsed into a half dozen files by function.

** The tangle function
You still need some settings and functions in your ~/init.el/~ file, including one that calls ~/config.org/~.
I used a function to do so.
I obtained this function from [[https://raw.githubusercontent.com/novoid/dot-emacs/master/init.el][[[https://raw.githubusercontent.com/novoid/dot-emacs/master/init.el][Karl Voigt]].
This function is supposed to load the code chunks more rapidly.

** emacsclient
Alternatively, you can start an emacsclient daemon that is always up.
This approach can eliminate the start-up lag.
See the README.md file for template code for the ~gnu.emacs.daemon.plist~.

On the Mac, launch the daemon with the following command ~launchctl load -w ~/Library/LaunchAgents/gnu.emacs.daemon.plist~.
Kill the daemon with the following command ~launchctl unload ~/Library/LaunchAgents/gnu.emacs.daemon.plist~.

You have to do these steps in reverse order when updating your configuration.

You use ~emacsclient~ to connect to the server and to upload your configuration.
This command starts the server if it is not already running.

# #+BEGIN_COMMENT
# #+BEGIN_SRC emacs-lisp
# (server-start)
# ;;(unless (server-running-p) (server-start))
# #+END_SRC
# #+END_COMMENT
# 
In general, the emacsclient is great when your configuration is stable.
If you are tweaking you config.org file frequently, it is not worth the trouble because you have to kill and restart the server frequently.
Long-time Emacs users just reload the init.el after editing thier configuration rather than restart Emacs.


** eval-buffer

Yes, you can load the init.el file into a buffer to trigger reloading the config.org file.
Then you can run ~M-x eval-buffer~ to trigger the reloading of config.org.
You might even what to configure Emacs to load init.el on startup.
However, sometimes a clean restart is required when you are beginner.

** Evaluating code chunks

The elisp code in the scratch buffer can be run by placing the cursor right after the leftmost parenthesis and entering ~C-x C-e~ or by placing the cursor inside of the parenthesis and entering ~C-M-x~.
You can use these commands to test bits of configuration in your ~<*scratch*>~ buffer before committing to adding the code chunks to your config.org file.
You can also check expressions in the elisp REPL ielm or in the eshell, which is also a elisp REPL (see the section below about [[*terminals]]: there are four options).
Enter ~M-x ielm~ to start ielm.
Below, I map ielm to the alias erepl via ~(defalias 'erepl 'ielm)~ because erepl is easier to remember.
Enter ~M-x eshell~ to start eshell.

There are at least 13-ways to run elisp code.
I describe some of them on slides 16-20 [[https://github.com/MooersLab/EmacsATX4May2022/blob/main/Slides_Functional_Elisp_from_the_beginning.pdf][here]].

** Comments in elisp

Two semicolons precede comments that start at the beginning of a line.
One semicolon precedes comments that start after a code fragment and on the same line.

** Comments in Org files

Lines starting with zero or more whitespace characters followed by one ``#'' plus a whitespace are treated as comments and, as such, are not exported.
Likewise, regions surrounded by ~#+BEGIN_COMMENT~ . . . ~#+END_COMMENT~ are not exported.
These seem to need to flank code blocks tightly to work.

Finally, a ~COMMENT~ keyword at the beginning of an entry, but after any other keyword or priority cookie, comments out the entire subtree.
In this case, the subtree is not exported, and no code block within it is executed.
The command below changes the comment status of a headline.

~C-c ;~ or ~M-x (org-toggle-comment)~.

Toggle the ~COMMENT~ keyword at the beginning of an entry.

* Setup of PATHS

The zsh shell is the default for Mac OS X since Mac OS X 10.15.
Edit this code block to switch to using bash on most remote Linux computing platforms.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :init
  (setenv "SHELL" "/bin/zsh")
  :ensure t
  :if (memq window-system '(mac ns x))
  :config
  (setq exec-path-from-shell-variables '("PATH" "GOPATH" "PYTHONPATH"))
  (exec-path-from-shell-initialize))
#+END_SRC


# when (memq window-system '(mac ns x))
#   (exec-path-from-shell-initialize))


* Bibtex configuration

#+BEGIN_SRC emacs-lisp
(defconst blaine/bib-libraries (list "~/Documents/global.bib")) ; All of my bib databases.
#+END_SRC


* Basic customizations


** custom file config


#+BEGIN_SRC emacs-lisp
(setq custom-file (locate-user-emacs-file "custom-var.el"))
(load custom-file 'noerror 'nomessage)
#+END_SRC



** Dialog

Don't pop up UI dialogs when prompting.
Source: [[https://www.youtube.com/watch?v=51eSeqcaikM&list=PLEoMzSkcN8oNmd98m_6FoaJseUsa6QGm2&index=2][Dave Wilson]]

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC


** Dired automated update

Revert Dired and other buffers after changes to files in directories on disk.
Source: [[https://www.youtube.com/watch?v=51eSeqcaikM&list=PLEoMzSkcN8oNmd98m_6FoaJseUsa6QGm2&index=2][Dave Wilson]]

#+BEGIN_SRC emacs-lisp
(setq global-auto-revert-non-file-buffers t)
#+END_SRC


** Change file permissions in dired

The filenames are editable by default.
With this setting, you can edit the file permissions.

#+BEGIN_SRC emacs-lisp
(setq wdired-allow-to-change-permissions t)
#+END_SRC

** Suggested by Professor Chris Kauffman

Dr. Kauffman is a computer science professor at the University of Minnesota and an user of Emacs since his undergraduate days two decades ago.
He provides an excellent [[https://www-users.cse.umn.edu/~kauffman/tooltime/][workshop ]]on how to get up and running in Emacs quickly.

#+BEGIN_SRC emacs-lisp
(ido-mode 1)
(horizontal-scroll-bar-mode 1)
(global-auto-revert-mode 1)
(column-number-mode 1)
(global-display-line-numbers-mode t)
(global-hl-line-mode 1)
(display-time-mode t) ; dislay time in
(tool-bar-mode 0) ;; no gui toolbar
(add-to-list 'default-frame-alist '(fullscreen . maximized)); fullscreen on Try toggleing M-x ns-use-native-fullscreen
;; Display line numbers
(when (version<= "26.0.50" emacs-version)
   (global-display-line-numbers-mode))
(dolist (mode '(term-mode-hook
                shell-mode-hook
		eshell-mode-hook
		vtern-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC


A faked full screen.

#+BEGIN_SRC emacs-lisp
(use-package maxframe
   :ensure t)
(defvar my-fullscreen-p t "Check if fullscreen is on or off")
(defun my-toggle-fullscreen ()
  (interactive)
  (setq my-fullscreen-p (not my-fullscreen-p))
  (if my-fullscreen-p
	  (restore-frame)
	(maximize-frame)))

;; (global-set-key (kbd "M-RET") 'my-toggle-fullscreen)
(global-set-key (kbd "M-RET") 'toggle-frame-fullscreen)
#+END_SRC


** Evaluate a region or the full buffer with C-x E
[[https://stackoverflow.com/questions/2518647/is-it-possible-to-evaluate-entire-buffer-in-emacs][Source]]

If a region has more than one symbolic expression, it can be evaluated by entering ~C-x E~.

#+BEGIN_SRC emacs-lisp
(defun eval-region-or-buffer ()
  (interactive)
  (let ((debug-on-error t))
    (cond
     (mark-active
      (call-interactively 'eval-region)
      (message "Region evaluated!")
      (setq deactivate-mark t))
     (t
      (eval-buffer)
      (message "Buffer evaluated!")))))
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (local-set-key (kbd "C-x E") 'eval-region-or-buffer)))
#+END_SRC


** Hyper and Super key bindings

See this [[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html][ for more information.]]
I tried option for the super key.
The s-c keybinding is used for copying.
Then I switched to caplocks for a while.
This did not work well.
I am back to using the option key as the super key.


#+BEGIN_SRC emacs-lisp
;; set keys for Apple keyboard, for emacs in OS X
;; Source http://xahlee.info/emacs/emacs/emacs_hyper_super_keys.html
(setq mac-command-modifier 'meta) ; make cmd key do Meta
(setq mac-option-modifier 'super) ; make alt or opt key do Super.
(setq mac-control-modifier 'control) ; make Control key do Control
(setq mac-function-modifier 'hyper)  ; make Fn key do Hyper. Only works on Apple produced keyboards.  
(setq mac-right-command-modifier 'hyper)
#+END_SRC



** Switching buffers

See discussion [[https://www.reddit.com/r/emacs/comments/ybqp3m/actually_utilizing_nextbuffer_and_previousbuffer/][here]].

#+BEGIN_SRC emacs-lisp
;; Switch to previous buffer
(define-key global-map (kbd "s-<left>") 'previous-buffer)
;; Switch to next buffer
(define-key global-map (kbd "s-<right>") 'next-buffer)
#+END_SRC

** Minibuffer history keybindings


The calling up of a previously issued command in the minibuffer with ~M-p~ saves times.


#+BEGIN_SRC emacs-lisp
(autoload 'edit-server-maybe-dehtmlize-buffer "edit-server-htmlize" "edit-server-htmlize" t)
(autoload 'edit-server-maybe-htmlize-buffer "edit-server-htmlize" "edit-server-htmlize" t)
(add-hook 'edit-server-start-hook 'edit-server-maybe-dehtmlize-buffer)
(add-hook 'edit-server-done-hook  'edit-server-maybe-htmlize-buffer)

(define-key minibuffer-local-map (kbd "M-p") 'previous-complete-history-element)
(define-key minibuffer-local-map (kbd "M-n") 'next-complete-history-element)
(define-key minibuffer-local-map (kbd "<up>") 'previous-complete-history-element)
(define-key minibuffer-local-map (kbd "<down>") 'next-complete-history-element)
#+END_SRC



#+BEGIN_SRC emacs-lisp
;; Highlight current line (Needs more tweaking with current dark theme.)
(global-hl-line-mode +1)
;;(add-to-list 'default-frame-alist '(background-color . "lightmagenta"))
(set-face-background 'hl-line "dark cyan")
(set-face-attribute 'mode-line nil :height 260)
#+END_SRC

*** Move selected regions up or down

It is commands like these one that enable rapid reorganization of your prose when writing one sentence per row.
Thank you to DivineDomain for the suggested upgrade.  Source: https://www.emacswiki.org/emacs/MoveText

#+BEGIN_SRC emacs-lisp
(defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      ( text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg))
        (forward-line -1))
      (move-to-column column t)))))

(defun move-line-region-down (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines down."
  (interactive "*p")
  (move-text-internal arg))

(defun move-line-region-up (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines up."
  (interactive "*p")
  (move-text-internal (- arg)))

(global-set-key (kbd "M-<down>") 'move-line-region-down)
(global-set-key (kbd "M-<up>") 'move-line-region-up)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version )
(global-display-line-numbers-mode))
#+END_SRC





*** Commenting Code

[[https://www.emacswiki.org/emacs/CommentingCode][Commenting code source.]]

#+BEGIN_SRC emacs-lisp
;; source: https://www.emacswiki.org/emacs/CommentingCode
;; This looks useful. The selected region does not have to start at the beginning of the line.
;; Source: https://www.emacswiki.org/emacs/CommentingCode
(defun comment-eclipse ()
      (interactive)
      (let ((start (line-beginning-position))
            (end (line-end-position)))
        (when (or (not transient-mark-mode) (region-active-p))
          (setq start (save-excursion
                        (goto-char (region-beginning))
                        (beginning-of-line)
                        (point))
                end (save-excursion
                      (goto-char (region-end))
                      (end-of-line)
                      (point))))
        (comment-or-uncomment-region start end)))
(global-set-key "\M-;" 'comment-eclipse)
#+END_SRC



*** PDF viewing with retina display

Combined with emacs-mac, this gives good PDF quality for [[https://www.aidanscannell.com/post/setting-up-an-emacs-playground-on-mac/][retina display]].

#+BEGIN_SRC emacs-lisp
(setq pdf-view-use-scaling t)
#+END_SRC

*** PDF default page width behavior

#+BEGIN_SRC emacs-lisp
(setq-default pdf-view-display-size 'fit-page)
#+END_SRC

*** Provide matching parentheses

[[https://ianyepan.github.io/posts/setting-up-use-package/][Source]] for matching parentheses.

Set delay in the matching parenthesis to zero.
We are modifying the behavior of a built-in package.

#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode t)
#+END_SRC


*** Use rainbow-delimiters

These aid in the matching of parenthesis in lisp family computer code.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(set-face-attribute 'rainbow-delimiters-unmatched-face nil
            :foreground "cyan"
            :inherit 'error
            :box t)
#+END_SRC

*** recentf

List recently opened files.

#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
#+END_SRC

*** highlight current line

#+BEGIN_SRC emacs-lisp
;; highlight current line
(global-hl-line-mode +1)
(set-face-background hl-line-face "cyan")
(set-face-attribute 'mode-line nil  :height 360)
#+END_SRC


*** revert buffers

Revert buffers when the underlying file has changed.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC


*** save history

Save history going back 25 commands.
To long of a history slows startup.
Use M-p to get previous command used in the minibuffer.
Use M-n to move to next command.

#+BEGIN_SRC emacs-lisp
(setq history-length 25)
(savehist-mode 1)
#+END_SRC


** save place


Save file place in a file.

#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC



** System-specific configurations

These settings enables using the same configuration file on multiple platforms.
Note that windows-nt includes [[https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html][windows 10]].


#+BEGIN_SRC emacs-lisp
(defconst *is-a-mac* (eq system-type 'darwin))
(defconst *is-a-linux* (eq system-type 'gnu/linux))
(defconst *is-windows* (eq system-type 'windows-nt))
(defconst *is-cygwin* (eq system-type 'cygwin))
(defconst *is-unix* (not *is-windows*))
#+End_SRC


*** Give new Emacs frame the focus of the keyborad


[[https://medium.com/really-learn-programming/configuring-emacs-on-macos-a6c5a0a8b9fa][source]]


#+BEGIN_SRC emacs-lisp
(when (featurep 'ns)
  (defun ns-raise-emacs ()
    "Raise Emacs."
    (ns-do-applescript "tell application \"Emacs\" to activate"))
(defun ns-raise-emacs-with-frame (frame)
    "Raise Emacs and select the provided frame."
    (with-selected-frame frame
      (when (display-graphic-p)
        (ns-raise-emacs))))
(add-hook 'after-make-frame-functions 'ns-raise-emacs-with-frame)
(when (display-graphic-p)
    (ns-raise-emacs)))
#+End_SRC







* Package Customizations

Find packages by browsing the [[http://melpa.org][melpa]] website.
Install updates to packages with ~package-list-packages RET U x y~.
Then run ~package-install RET <select or enter package name>~ to install a new package.

The /use-package/ package has a number of [[https://jwiegley.github.io/use-package/keywords/][keywords]].

** A


*** ac autocompletion packag

This is a 11-year fold package that extends Emacs's built in autocompletion system.

#+BEGIN_SRC emacs-lisp
(ac-config-default)

;; source: https://www.emacswiki.org/emacs/EshellCompletion
(defun ac-pcomplete ()
  ;; eshell uses `-and-inherit' to  a \t if no completion
  ;; can be found, but this must not happen as auto-complete source
  (flet ((-and-inherit (&rest args)))
    ;; this code is stolen from `pcomplete' in pcomplete.el
    (let* (tramp-mode ;; do not automatically complete remote stuff
           (pcomplete-stub)
           (pcomplete-show-list t) ;; inhibit patterns like * being deleted
           pcomplete-seen pcomplete-norm-func
           pcomplete-args pcomplete-last pcomplete-index
           (pcomplete-autolist pcomplete-autolist)
           (pcomplete-suffix-list pcomplete-suffix-list)
           (candidates (pcomplete-completions))
           (beg (pcomplete-begin))
           ;; note, buffer text and completion argument may be
           ;; different because the buffer text may bet transformed
           ;; before being completed (e.g. variables like $HOME may be
           ;; expanded)
           (buftext (buffer-substring beg (point)))
           (arg (nth pcomplete-index pcomplete-args)))
      ;; we auto-complete only if the stub is non-empty and matches
      ;; the end of the buffer text
      (when (and (not (zerop (length pcomplete-stub)))
                 (or (string= pcomplete-stub ; Emacs 23
                              (substring buftext
                                         (max 0
                                              (- (length buftext)
                                                 (length pcomplete-stub)))))
                     (string= pcomplete-stub ; Emacs 24
                              (substring arg
                                         (max 0
                                              (- (length arg)
                                                 (length pcomplete-stub)))))))
        ;; Collect all possible completions for the stub. Note that
        ;; `candidates` may be a function, that's why we use
        ;; `all-completions`.
        (let* ((cnds (all-completions pcomplete-stub candidates))
               (bnds (completion-boundaries pcomplete-stub
                                            candidates
                                            nil
                                            ""))
               (skip (- (length pcomplete-stub) (car bnds))))
          ;; We replace the stub at the beginning of each candidate by
          ;; the real buffer content.
          (mapcar #'(lambda (cand) (concat buftext (substring cand skip)))
                  cnds))))))

(defvar ac-source-pcomplete
  '((candidates . ac-pcomplete)))

(add-hook 'eshell-mode-hook #'(lambda () (setq ac-sources '(ac-source-pcomplete))))
(add-to-list 'ac-modes 'eshell-mode)
#+END_SRC


*** Autocmpletion via crafted-emacs

This is the crafted-emacs autocompletion stack.
Do not use ivy or helm if you use this stack.


#+BEGIN_SRC emacs-lisp
;;; crafted-completion.el --- Crafted Completion Configuration -*- lexical-binding: t; -*-

;; Copyright (C) 2022
;; SPDX-License-Identifier: MIT

;; Author: System Crafters Community

;;; Commentary:

;; Setup completion packages.  Completion in this sense is more like
;; narrowing, allowing the user to find matches based on minimal
;; inputs and "complete" the commands, variables, etc from the
;; narrowed list of possible choices.

;;; Code:


(use-package cape :ensure t)
(use-package consult :ensure t)
(use-package corfu :ensure t)
(use-package embark-consult :ensure t)
(use-package embark :ensure t)
(use-package orderless :ensure t)
(use-package vertico :ensure t)
(use-package marginalia :ensure t)
(use-package cape :ensure t)




(defun crafted-completion/minibuffer-backward-kill (arg)
  "Delete word or delete up to parent folder when completion is a file.

ARG is the thing being completed in the minibuffer."
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
    (backward-kill-word arg)))

;;; Vertico
(require 'vertico)

;; Straight and Package bundle the vertico package differently. When
;; using `package.el', the extensions are built into the package and
;; available on the load-path. When using `straight.el', the
;; extensions are not built into the package, so have to add that path
;; to the load-path manually to enable the following require.
;;(when (eq crafted-package-system 'straight)
;;  (add-to-list 'load-path
;;               (expand-file-name "straight/build/vertico/extensions"
;;                                 straight-base-dir)))
;;(require 'vertico-directory)

(with-eval-after-load 'evil
  (define-key vertico-map (kbd "C-j") 'vertico-next)
  (define-key vertico-map (kbd "C-k") 'vertico-previous)
  (define-key vertico-map (kbd "M-h") 'vertico-directory-up))

;; Cycle back to top/bottom result when the edge is reached
(customize-set-variable 'vertico-cycle t)

;; Start Vertico
(vertico-mode 1)

;;; Marginalia

;; Configure Marginalia
(require 'marginalia)
(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
(marginalia-mode 1)

;; Set some consult bindings
(global-set-key (kbd "C-s") 'consult-line)
(define-key minibuffer-local-map (kbd "C-r") 'consult-history)

(setq completion-in-region-function #'consult-completion-in-region)


;;; Orderless

;; Set up Orderless for better fuzzy matching
(require 'orderless)
(customize-set-variable 'completion-styles '(orderless basic))
(customize-set-variable 'completion-category-overrides '((file (styles . (partial-completion)))))

;;; Embark
(require 'embark)
(require 'embark-consult)

(global-set-key [remap describe-bindings] #'embark-bindings)
(global-set-key (kbd "C-.") 'embark-act)

;; Use Embark to show bindings in a key prefix with `C-h`
(setq prefix-help-command #'embark-prefix-help-command)

(with-eval-after-load 'embark-consult
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))

;;; Corfu

;; Setup corfu for popup like completion
(customize-set-variable 'corfu-cycle t) ; Allows cycling through candidates
(customize-set-variable 'corfu-auto t)  ; Enable auto completion
(customize-set-variable 'corfu-auto-prefix 2) ; Complete with less prefix keys
(customize-set-variable 'corfu-auto-delay 0.0) ; No delay for completion
(customize-set-variable 'corfu-echo-documentation 0.25) ; Echo docs for current completion option

(global-corfu-mode 1)

;;; Cape

;; Setup Cape for better completion-at-point support and more
(require 'cape)

;; Add useful defaults completion sources from cape
(add-to-list 'completion-at-point-functions #'cape-file)
(add-to-list 'completion-at-point-functions #'cape-dabbrev)

;; Silence the pcomplete capf, no errors or messages!
;; Important for corfu
(advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

;; Ensure that pcomplete does not write to the buffer
;; and behaves as a pure `completion-at-point-function'.
(advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
(add-hook 'eshell-mode-hook
          (lambda () (setq-local corfu-quit-at-boundary t
                            corfu-quit-no-match t
                            corfu-auto nil)
            (corfu-mode)))
#+END_SRC


*** atomic-chrome

In brief, after installing GhostText in Chrome and atomic-chrome in Emacs, do the followwing'

+ enter ~M-x atomic-chrome-start-server~ to start the server
+ click on the ghost icon in the tool bar above the textarea in a browser. This opens a buffer in Emacs. It will have the same name as the webpage in Emacs.
+ enter ~M-x latex-mode~

The atomic-chrome package enables instant updates in the browser text area while typing in the corresponding Emacs buffer.
This package is newer than edit-server package and seems to have some advantages.
It supports instant updating and bidrectional editing.
For the configuration options, see [[https://github.com/alpha22jp/atomic-chrome][its repo.]]

The competitor packages are ~emacs-everywhere~ and ~emacs-anywhere~.
The latter two packages depend on running emacsclient whereas this is not required with atomic-chrome.
It is not obvious how to configure the latter two packages to use the latex-mode.
They seem to be limited to editing text boxes on webpages.

You have to install the ghosttext extension for Chrome.
This extension works in the new browser Brave.
There is suppose to be an extension for Firefox too.
Then you have to manage the extension by enabling access to the local files.
Next, you have to pin the extension to the task bar.

You also have to install from MELPA the atomic-chrome package in Emacs.
Then you issue the command ~M-x atomic-chrome-start-server~.
Back in the browser, click on the ghost icon in the toolbar.
The edges of the text area will be highlighted in blue.
You will be able to see the new text as it is typed in Emacs.
The current bottom of the text area is shown.
If you have to type in an earlier part of the text area, you may not see this part of the text area in the browser without scrolling up.
That is,  the browser does not automatically refocus on the area of active typing.
In other words, it does not track the position of the cursor.

In the case of 750words, it frequently saves the text.
750words also updates the word count upon each save.
This is an alternate means of monitoring the number of words written.

You can, likewise, type inside of the text area in the browser, and your writing will appear in the Emacs buffer.
The ~cmd-s~ shortcut works in the browser to save the current text.

To exit the server, enter ~C-c C-c~ in Emacs.

One way around the refocusing issue is to type your new chunk of text at the bottom of the text area.
When finished, you can then cut and paste this text in the desired location in the earlier part of the text area.

One advantage of atomic-chrome over the edit-server is that you can type in either Emacs or the text area.
The edit-server expects you to do all of your typing in Emacs.
All of the installed editing tools may not be available at both sites.
For example, on 11 May 2022, the lsp-grammarly was not working in Emacs, but the grammarly plugin for Chrome was working.
I could take advantage of this plugin by typing in the text area for 750words.

On the other hand, edit-server allowed you to use a hook to recognize that the text area on 750word are to be opened in the latex-mode.
The latex-mode needs to be activated to be able to take advantage of the yasnippet snippets in Emacs.
Enter ~M-x latex-mode~.
You can use the configuration below to set the default major mode.
You can also configure atomic-chrome to set the major mode by website.

#+BEGIN_SRC emacs-lisp
;; (defun enable-atomic-lsp ()
;;   (setq-local buffer-file-name  (f-join "/path/to/some/project" (buffer-name)))
;;   (lsp)
;;   (lsp-ui-mode)
;;   )
;;
;; (use-package lsp-mode
;;     :ensure t
;;     :hook ((python-mode . lsp))
;;     :commands lsp
;;     :config (add-hook 'atomic-chrome-edit-mode-hook 'enable-atomic-lsp)
;;  )
(use-package atomic-chrome)
;; (atomic-chrome-start-server)
(setq atomic-chrome-default-major-mode 'python-mode)
(setq atomic-chrome-extension-type-list '(ghost-text))
;;(atomic-chrome-start-httpd)
(setq atomic-chrome-server-ghost-text-port 4001)
(setq atomic-chrome-url-major-mode-alist
      '(("github\\.com" . gfm-mode)
        ("overleaf.com" . latex-mode)
        ("750words.com" . latex-mode)))
#+END_SRC

Select the style of opening the editing buffer by atomic-chrome-buffer-open-style.

full: Open in the selected window.
split: Open in the new window by splitting the selected window (default).
frame: Create a new frame and window in it. Must be using some windowing pacakge.


#+BEGIN_SRC emacs-lisp
(setq atomic-chrome-buffer-open-style 'split)
#+END_SRC




*** AUCTeX
[[source][https://stackoverflow.com/questions/3300497/using-minted-source-code-latex-package-with-emacs-auctex]]

To enable the use of the minted package.

#+BEGIN_SRC emacs-lisp
(eval-after-load "tex"
  '(setcdr (assoc "LaTeX" TeX-command-list)
          '("%`%l%(mode) -shell-escape%' %t"
          TeX-run-TeX nil (latex-mode doctex-mode) :help "Run LaTeX")
    )
  )
#+END_SRC

*** awesome-tab

#+BEGIN_SRC emacs-lisp
(use-package awesome-tab
    :load-path "~/.emacs.default/elisp/awesome-tab"
    :config
    (awesome-tab-mode t))
#+END_SRC


** B 

*** Bibtex from DOI

Fetch bibtex entry for the given DOI. 
Insert at point, which should be in your global.bib file.
Needs code to reformat the bibtex key.
You have to run the funciton with M-x first to activate the key-binding.

[[source][https://www.anghyflawn.net/blog/2014/emacs-give-a-doi-get-a-bibtex-entry/]]

#+BEGIN_SRC emacs-lisp
(defun get-bibtex-from-doi (doi)
 "Get a BibTeX entry from the DOI"
 (interactive "MDOI: ")
 (let ((url-mime-accept-string "text/bibliography;style=bibtex"))
   (with-current-buffer 
     (url-retrieve-synchronously 
       (format "http://dx.doi.org/%s" 
       	(replace-regexp-in-string "http://dx.doi.org/" "" doi)))
     (switch-to-buffer (current-buffer))
     (goto-char (point-max))
     (setq bibtex-entry 
     	  (buffer-substring 
          	(string-match "@" (buffer-string))
              (point)))
     (kill-buffer (current-buffer))))
 ( (decode-coding-string bibtex-entry 'utf-8))
 (define-key bibtex-mode-map (kbd "C-c C-b") 'get-bibtex-from-doi)
 (bibtex-fill-entry))
#+END_SRC





Cider supports running a Clojure REPL in a parallel window.

#+BEGIN_SRC emacs-lisp
(setq org-babel-clojure-backend 'cider)
(use-package cider
 :ensure t)
(setq org-edit-src-content-indentation 0
     org-src-tab-acts-natively t
     org-src-fontify-natively t
     org-confirm-babel-evaluate nil)
(setq nrepl-hide-special-buffers t
     cider-repl-pop-to-buffer-on-connect nil
     cider-popup-stacktraces nil
     cider-repl-popup-stacktraces t)

;; Useful keybindings when using Clojure from Org
(org-defkey org-mode-map "\C-x\C-e" 'cider-eval-last-sexp)
(org-defkey org-mode-map "\C-c\C-d" 'cider-doc)


;; git clone --single-branch --branch correlations-heatmap https://github.com/BlaineMooersLab/clojure-sandbox.git
;; (inspired by: https://github.com/clojure-emacs/cider/issues/3094)
;;(require 'cider-mode)

(defun cider-tap (&rest r) ; inspired by https://github.com/clojure-emacs/cider/issues/3094
  (cons (concat "(let [__value "
                (caar r)
                "] (tap> {:clay-tap? true :form (quote " (caar r) ") :value __value}) __value)")
        (cdar r)))

(advice-add 'cider-nrepl-request:eval
:filter-args #'cider-tap)


;; Clay related functions from Daniel Slutsky
;; https://scicloj.github.io/clay/#Setup

(defun scittle-show ()
  (interactive)
  (save-buffer)
  (let
      ((filename
        (buffer-file-name)))
    (when filename
      (cider-interactive-eval
       (concat "(scicloj.clay.v2.api/show-doc! \"" filename "\" {})")))))
(define-key clojure-mode-map "\C-c\C-s" 'scittle-show)

(defun scittle-show-and-write ()
  (interactive)
  (save-buffer)
  (let
      ((filename
        (buffer-file-name)))
    (when filename
      (cider-interactive-eval
       (concat "(scicloj.clay.v2.api/show-doc-and-write-html! \"" filename "\" {:toc? true})")))))
(define-key clojure-mode-map "\C-c\C-w" 'scittle-show-and-write)


;; Clerk is another "notebook"--really a brower interface
;;

(defun clerk-show ()
  (interactive)
  (when-let
      ((filename
        (buffer-file-name)))
    (save-buffer)
    (cider-interactive-eval
     (concat "(nextjournal.clerk/show! \"" filename "\")"))))

(define-key clojure-mode-map (kbd "<M-return>") 'clerk-show)
#+END_SRC






**** nbb--cider link up to run ClojureScript via nbb

[[https://github.com/babashka/nbb][nbb]] means not ~babashka~.

/babashka/ is built on a reduced set of Clojure.
It is independent of the JVM.
I stored it in /usr/local/bin.
It is invoked by entering ~bb~.
~bb '(vec (dedupe *input*))' <<< '[1 1 1 1 2]'~
Returns ~[1 2]~.

You can run bash scripts with Clojure code inside.
Add a shebang with bb.
~./cst.clj~ returns central time.
It is the first choice for running Clojure via scripts because it starts up faster (no JVM to spin up).
There are several other ways to run Clojure from the command line.

In contrast to /babashka/, ~nbb~ runs on top of Node.js rather than the JVM.
~nnb~ runs ClojureScript.

Install nbb via ~npm install -g nbb~.
Install ~npm install -g csv-parse shelljs term-size zx~.
Test with ~nbb -e '(+ 1 2 3)' ~ on the command line.
Try a multiline test ~nbb -e '(defn exp [x n] (reduce * (repeat n x)))\n (exp 4 10)' ~.

To run ~nbb~ from within Emacs, launch a server via ~nbb nrepl-server :port 1337~ outside Emacs on the terminal.
Enter ~M-x cider-connect <RET> localhost <RET> 1337~.
Then change the current buffer to clojure-mode.

There is a bug. When you use cider-connect this is actually cider-connect-clj, which sets the connection type automatically to Clojure.
Then if you try to evaluate something from a cljs file, CIDER looks for a cljs REPL, which it cannot find.
Enter ~M-x clojure-mode~ to fix this issue.

Note, you can run ~lein repl :connect 1337~ from the terminal.



**** citar

/citar/ is a citation manager that plays well with /selectrum/ or /vertico/.
Its functionality overlaps with bibtex-ivy and bibtex company.
It works in markdown, org, and LaTeX.

The documentation is a bit spartan and not beginner-friendly [[https://github.com/bdarcus/citar][Source]].

#+BEGIN_SRC emacs-lisp
(use-package citar
   :ensure t
   :bind (("C-c b" . citar--citation)
          :map minibuffer-local-map
          ("M-b" . citar--preset))
   :custom
   (citar-open-note-function 'orb-citar-edit-note)
   (citar-select-multiple t)
   (citar-notes-paths '("~/org-roam/"))
   (citar-library-paths '("~/0papersLabeled" "~/0booksLabeled"))
   (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
   (citar-file-extensions '("pdf" "epub"))
   (org-cite-follow-processor 'citar)
   (citar-bibliography '("~/Documents/global.bib")))

(use-package citar-embark
  :ensure t
  :after citar embark
  :no-require
  :config (citar-embark-mode)
  )

(use-package citar-org-roam
  :ensure t
  :after citar org-roam
  :no-require
  :custom
  (citar-org-roam-subdir nil)
  :config (citar-org-roam-mode)
  )


#+END_SRC
Note that scholar-import is configured to work with citar.




**** inf-clojure minor mode

This is the easiest way to run Clojure from Emacs.
To open a clj repl in a parallel buffer in Emacs, load a Clojure file and invoke the inf-clojure minor mode by entering ~M-x inf-clojure~.
The inf-clojure mode is simpler than cider and easier for beginners of Clojure.


**** modeline tweak for Clojure

[[http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html][Clojure]]



**** clojure-lsp

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :hook ((clojure-mode . lsp)
         (clojurec-mode . lsp)
         (clojurescript-mode . lsp))
  :config
  ;; add paths to your local installation of project mgmt tools, like lein
  (setenv "PATH" (concat
                   "/usr/local/bin" path-separator
                   (getenv "PATH")))
  (dolist (m '(clojure-mode
               clojurec-mode
               clojurescript-mode
               clojurex-mode))
     (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))
  (setq lsp-clojure-server-command '("/usr/local/Cellar/clojure-lsp-native"))) ; Optional: In case `clojure-lsp` is not in your $PATH
#+END_SRC


*** Rainbow blocks for Clojure

The package rainbow-blocks does color highlighting by scope rather than syntax.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-blocks
  :ensure t)
;; activate for clojure files
(add-hook 'clojure-mode-hook 'rainbow-blocks-mode)
(add-hook 'org-mode-hook 'rainbow-blocks-mode)
(add-hook 'emacs-lisp-mode-hook 'rainbow-blocks-mode)
#+END_SRC



*** command-log-mode

This featue is good for screen casts.
I may need to fiddle with the configuration further.

#+BEGIN_SRC emacs-lisp
(use-package command-log-mode
  :commands command-log-mode)
#+END_SRC





*** Copilot

The requires the GitHub Coplit subscription.

#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.default/manual-packages/copilot.el/copilot.el")

;; Use copilot-mode to automatically provide completions
(add-hook 'prog-mode-hook 'copilot-mode)

; complete by copilot first, then company-mode
(defun my-tab ()
  (interactive)
  (or (copilot-accept-completion)
      (company-indent-or-complete-common nil)))

; modify company-mode behaviors
(with-eval-after-load 'company
  ;; disable inline previews
  (delq 'company-preview-if-just-one-frontend company-frontends)

  (define-key company-mode-map (kbd "<tab>") 'my-tab)
  (define-key company-mode-map (kbd "TAB") 'my-tab)
  (define-key company-active-map (kbd "<tab>") 'my-tab)
  (define-key company-active-map (kbd "TAB") 'my-tab))
#+END_SRC
#+END_COMMENT




**** Copilot commands:
#+BEGIN_COMMENT
copilot-diagnose
Check the current status of the plugin. Also you can check logs in the *copilot events* buffer and stderr output in the *copilot stderr* buffer.

copilot-login
Login to GitHub, required for using the plugin.

copilot-mode
Enable/disable copilot mode.

copilot-complete
Try to complete at the current point.

copilot-accept-completion
Accept the current completion.

copilot-clear-overlay
Clear copilot overlay in the current buffer.

copilot-accept-completion-by-line / copilot-accept-completion-by-word
Similar to copilot-accept-completion, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.

copilot-next-completion / copilot-previous-completion
Cycle through the completion list.

copilot-logout
Logout from GitHub.
#+END_COMMENT




**** Copilot customizations
#+BEGIN_COMMENT
copilot-node-executable
The executable path of Node.js.

copilot-idle-delay
Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.

copilot-enable-predicates
A list of predicate functions with no argument to enable Copilot in copilot-mode. Copilot will be enabled only if all predicates return t.

copilot-disable-predicates
A list of predicate functions with no argument to disable Copilot in copilot-mode. Copilot will be disabled if any predicate returns t.
#+END_COMMENT



*** CUA-mode

Use C-x, C-v, C-c for cut, paste, and copy when in a marked region.
If the region is active, use C-S-x (or two rapid C-x C-x) instead C-x to do what C-x normally does in Emacs.
The same goes for the other CUA keys.

[[Source][https://www.emacswiki.org/emacs/CuaMode]]

#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
(cua-mode t)
    (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
    (transient-mark-mode 1) ;; No region when it is not highlighted
    (setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
#+END_SRC
#+END_COMMENT

** D

*** Dashboard configuration

#+BEGIN_SRC emacs-lisp
;; dashboard
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(setq dashboard-center-content t)
(setq dashboard--ascii-banner-centered t)
(setq dashboard-banner-logo-title "Loxo or selpercatinib. FDA-approved RET kinase inhibitor to treat non-small cell lung cancer in 2020.")
(use-package all-the-icons)
;;(insert (all-the-icons-icon-for-buffer))
(setq dashboard-center-content t)
(setq dashboard-image-banner-max-width 120)
(setq dashboard-image-banner-max-height 150)
(use-package page-break-lines)
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
(setq dashboard-startup-banner "/Users/blaine/images/loxo.png")
(setq dashboard-items '((recents  . 20)
                        (bookmarks . 50)
                        (projects . 250)
                        (registers . 5)))

;; (agenda . 15)
;; Set the title
;;(setq dashboard-banner-logo-title "Dashboard of Blaine Mooers")
;; Set the banner
;;(setq dashboard-startup-banner 'official)
;;(setq dashboard-startup-banner "/Users/blaine/Images/jmjd4alphaFOld1Aug30.png")
;; Value can be
;; 'official which displays the official emacs logo
;; 'logo which displays an alternative emacs logo
;; 1, 2 or 3 which displays one of the text banners
;; "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer

;; Content is not centered by default. To center, set
;;(setq dashboard-center-content t)

;; To disable shortcut "jump" indicators for each section, set
(setq dashboard-show-shortcuts nil)

; To show info about the packages loaded and the init time:
(setq dashboard-set-init-info t)

; To use it with counsel-projectile or persp-projectile
(setq dashboard-projects-switch-function 'projectile-persp-switch-project)

; To display today’s agenda items on the dashboard, add agenda to dashboard-items:
(add-to-list 'dashboard-items '(agenda) t)

; To show agenda for the upcoming seven days set the variable dashboard-week-agenda to t.
(setq dashboard-week-agenda t)
#+END_SRC


*** Dashboard refresh

Function to refresh dashboard and open in the current window.
This function is useful for accessing bookmarks and recent files created in the current session.
The last line in the code bloack defines a global key binding to F1.

Source of function by Jackson Benete Ferreira: the issues section of the [[https://github.com/emacs-dashboard/emacs-dashboard/issues/236][dashboard]] GitHub page.
I edited the documentation line to fix the grammar and add the final phrase.

#+BEGIN_SRC emacs-lisp
(defun new-dashboard ()
  "Jump to the dashboard buffer. If it doesn't exist, create one. Refresh while at it."
  (interactive)
  (switch-to-buffer dashboard-buffer-name)
  (dashboard-mode)
  (dashboard-insert-startupify-lists)
  (dashboard-refresh-buffer))
(global-set-key (kbd "<f1>") 'new-dashboard)
#+END_SRC


** D

*** dired-subtree

Source: https://xenodium.com/drill-down-emacs-dired-with-dired-subtree/

#+BEGIN_SRC emacs-lisp
(use-package dired-subtree :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+END_SRC


*** direx

~direx.el~ is a simple directory explorer and a generic tree explorer.
The source is in MELPA and on [GitHub](https://github.com/emacsorphanage/direx).

#+BEGIN_SRC emacs-lisp
;; (use-package direx
;;  :ensure t)
;; (global-set-key (kbd "C-x C-j") 'direx:jump-to-directory)
#+END_SRC

*** dired-icons

#+BEGIN_SRC emacs-lisp
(use-package dired-icon
  :ensure t
)
(add-hook 'dired-mode-hook 'dired-icon-mode)
#+END_SRC


*** dirvish

#+BEGIN_SRC emacs-lisp
(use-package dirvish
  :ensure t
)
(dirvish-override-dired-mode)
#+END_SRC

*** Doom mode-line

The doom mode-line can be used without the Doom configuration.
This mode-line hides the word count.

#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
   :ensure t
   :init (doom-modeline-mode 1)
   :custom ((doom-modeline-height 25)))
#+END_SRC
#+END_COMMENT

*** dot-mode

This minor mode enables the use of C-. to repeat the last command.
I want this great Vi command enabled globally.

#+BEGIN_SRC emacs-lisp
(use-package dot-mode)
(global-dot-mode t)
#+END_SRC



*** dotnet


#+BEGIN_SRC emacs-lisp
(add-hook 'csharp-mode-hook 'dotnet-mode)
;; and/or
(add-hook 'fsharp-mode-hook 'dotnet-mode)
#+END_SRC

The default prefix is ~C-c C-n~.
The prefix gives you access to the following key combinations:

|-----------------------+-----------------------|
| Keybinding            | Command               |
|-----------------------+-----------------------|
| C-c C-n a p           | dotnet-add-package    |
| C-c C-n a r            | dotnet-add-reference  |
| C-c C-n b             | dotnet-build          |
| C-c C-n c             | dotnet-clean          |
| C-c C-n g c           | dotnet-goto-csproj    |
| C-c C-n g f           | dotnet-goto-fsproj    |
| C-c C-n g s           | dotnet-goto-sln       |
| C-c C-n n             | dotnet-new            |
| C-c C-n p             | dotnet-publish        |
| C-c C-n r             | dotnet-restore        |
| C-c C-n e             | dotnet-run            |
| C-c C-n C-e           | dotnet-run-with-args  |
| C-c C-n s a           | dotnet-sln-add        |
| C-c C-n s l           | dotnet-sln-list       |
| C-c C-n s n           | dotnet-sln-new        |
| C-c C-n s r           | dotnet-sln-remove     |
| C-c C-n t             | dotnet-test           |
| C-c C-n T             | dotnet-test-rerun     |
|-----------------------+-----------------------|

You can customize the prefix by adding:
#+END_SRC



#+BEGIN_SRC emacs-lisp
;; (setq dotnet-mode-keymap-prefix (kbd "<ADD YOUR PREFIX HERE>"))
#+END_SRC


*** Dump-Jump

This [[https://github.com/jacktasia/dumb-jump][package]] was recommended by Micky Petersen
It is suppose to jump to definitions with ~M-.~ when the point is on a symbol.
I need read up on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]]

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t)
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
(setq xref-show-definitions-function #'xref-show-definitions-completing-read)
#+END_SRC


*** E


*** ebib

This package is used to manage bib files. It looks like fun.
The manual is found [[https://joostkremers.github.io/ebib/ebib-manual.html][here]].

#+BEGIN_SRC emacs-lisp
;; Ebib to take care of the actual bibliography
(use-package ebib
  :ensure t
  :config
  (setq ebib-preload-bib-files '("~/Documents/global.bib"))
  )
(global-set-key (kbd "C-c e") 'ebib)
#+END_SRC


*** Elfeed

Enter M-x elfeed to fire up a session.
Enter S-g to update the feeds.
ew

#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :ensure t)
(setq elfeed-curl-program-name "/opt/local/bin/curl")
(setq elfeed-search-title-max-width 130)
(use-package elfeed-org)
(setq rmh-elfeed-org-files (list "~/.emacs.default30/elfeed.org"))
(elfeed-org)
;;
;;(setq elfeed-feeds '("https://planet.emacslife.com/atom.xml" "http://feeds.nature.com/nchem/rss/current"
;;    "http://feeds.nature.com/nature/rss/current"
;;    "https://onlinelibrary.wiley.com/feed/1469896x/most-recent"
;;    "https://www.science.org/action/showFeed?type=axatoc&feed=rss&jc=science"
;;    "https://journals.iucr.org/j/rss10.xml"
;;    "https://journals.iucr.org/s/rss10.xml"
;;    "https://journals.iucr.org/m/rss10.xml"
;;    "https://journals.iucr.org/a/rss10.xml"
;;    "https://journals.iucr.org/d/rss10.xml"
;;    "http://feeds.feedburner.com/acs/chreay"
;;    "https://rss.sciencedirect.com/publication/science/10933263"
;;    "http://feeds.feedburner.com/acs/jcisd8"
;;    "https://www.pnas.org/about/rss"
;;    "http://feeds.feedburner.com/acs/cgdefu"
;;    "https://pubs.acs.org/page/follow.html?widget=follow-pane-rss"
;;    "https://rss.sciencedirect.com/publication/science/00222836"
;;    "https://academic.oup.com/rss/site_5127/3091.xml"
;;    "http://www.cell.com/cell/current.rss"
;;    "http://www.cell.com/cell/inpress.rss"
;;    "https://www.jstatsoft.org/gateway/plugin/WebFeedGatewayPlugin/atom"
;;    "https://rss.sciencedirect.com/publication/science/09692126"
;;    "https://onlinelibrary.wiley.com/feed/10970282/most-recent"
;;    "http://connect.biorxiv.org/biorxiv_xml.php?subject=biophysics+biochemistry+cancer"
;;    )

;; The following config is from Chris Cundy (https://cundy.me/post/elfeed/)
(defun concatenate-authors (authors-list)
  "Given AUTHORS-LIST, list of plists; return string of all authors
concatenated."
  (mapconcat
   (lambda (author) (plist-get author :name))
   authors-list ", "))

(defun my-search-print-fn (entry)
  "Print ENTRY to the buffer."
  (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
	 (title (or (elfeed-meta entry :title)
		    (elfeed-entry-title entry) ""))
	 (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
	 (feed (elfeed-entry-feed entry))
	 (feed-title
	  (when feed
	    (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
	 (entry-authors (concatenate-authors
			 (elfeed-meta entry :authors)))
	 (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
	 (tags-str (mapconcat
		    (lambda (s) (propertize s 'face
					    'elfeed-search-tag-face))
		    tags ","))
	 (title-width (- (window-width) 10
			 elfeed-search-trailing-width))
	 (title-column (elfeed-format-column
			title (elfeed-clamp
			       elfeed-search-title-min-width
			       title-width
			       elfeed-search-title-max-width)
			:left))
	 (authors-width 135)
	 (authors-column (elfeed-format-column
			entry-authors (elfeed-clamp
			       elfeed-search-title-min-width
			       authors-width
			       131)
			:left)))

    (insert (propertize date 'face 'elfeed-search-date-face) " ")

    (insert (propertize title-column
			'face title-faces 'kbd-help title) " ")

    (insert (propertize authors-column
			'face 'elfeed-search-date-face
			'kbd-help entry-authors) " ")

    ;; (when feed-title
    ;;   (insert (propertize entry-authors
    ;; 'face 'elfeed-search-feed-face) " "))

    (when entry-authors
      (insert (propertize feed-title
			  'face 'elfeed-search-feed-face) " "))

    ;; (when tags
    ;;   (insert "(" tags-str ")"))

    )
  )
(setq elfeed-search-print-entry-function #'my-search-print-fn)

(global-set-key (kbd "C-x w") 'elfeed)

(use-package  elfeed-score)
(elfeed-score-enable)
(define-key elfeed-search-mode-map "=" elfeed-score-map)

(run-at-time nil (* 8 60 60) #'elfeed-update)
#+END_SRC


The elfeed configuration below follows this [[https://www.cs.mcgill.ca/~ksinha4/post/emacs_research_workflow/][post]].


*** Emacs lisp REPL

The Emacs lisp REPL is called ielm.
I mapped erepl to ielm in the alias below because I have an easier time remembering erepl.
The `e` is for Emacs Lisp or elisp.
Note that eshell is also an Emacs Lisp REPL.

#+BEGIN_SRC emacs-lisp
(defalias 'erepl 'ielm)
#+END_SRC

To enhance the default automcomple, use the following code.
From Mickey Petersen's Mastering Emacs.

#+BEGIN_SRC emacs-lisp
(defun ielm-auto-complete ()
  "Enables `auto-complete' support in \\[ielm]."
  (setq ac-sources '(ac-source-functions
                     ac-source-variables
                     ac-source-features
                     ac-source-symbols
                     ac-source-words-in-same-mode-buffers))
  (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
  (auto-complete-mode 1))
(add-hook 'ielm-mode-hook 'ielm-auto-complete)
#+END_SRC


*** Edit-with-Emacs edit-server

Enable the editing of textareas in Chrome and FireFox with Emacs.
Must install edit-server first.

[[https://github.com/stsquad/emacs_chrome][Source ]]

#+BEGIN_SRC emacs-lisp
(use-package edit-server
  :ensure t
  :commands edit-server-start
  :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x))))

(when (require 'edit-server nil t)
    (setq edit-server-new-frame nil)
    (edit-server-start))

(setq edit-server-url-major-mode-alist
        '(("750words.com" . latex-mode)))

(setq edit-server-url-major-mode-alist
        '(("overleaf.com" . latex-mode)))

(setq edit-server-url-major-mode-alist
        '(("github\\.com" . markdown-mode)))

(add-hook 'edit-server-start-hook
          (lambda ()
            (when (string-match "github.com" (buffer-name))
              (markdown-mode))))
#+END_SRC



*** Load ess-r-mode


#+BEGIN_SRC emacs-lisp
(require 'ess-r-mode)
;; Code visibility:
(setq ess-eval-visibly 'nowait)

;; Font lock keywords for syntactic highlighting:
(setq ess-R-font-lock-keywords
      '((ess-R-fl-keyword:keywords . t)
	(ess-R-fl-keyword:constants . t)
	(ess-R-fl-keyword:modifiers . t)
	(ess-R-fl-keyword:fun-defs . t)
	(ess-R-fl-keyword:assign-ops . t)
	(ess-R-fl-keyword:%op% . t)
	(ess-fl-keyword:fun-calls . t)
	(ess-fl-keyword:numbers . t)
	(ess-fl-keyword:operators . t)
	(ess-fl-keyword:delimiters . t)
	(ess-fl-keyword:= . t)
	(ess-R-fl-keyword:F&T . t)))

;; Activate global mode for parenthesis matching:
(show-paren-mode)

;; Remove Flymake support:
(setq ess-use-flymake nil)
;; Replace it (globally) by Flycheck:
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))

;; Open Rdired buffer with F9:
(add-hook 'ess-r-mode-hook
	  '(lambda ()
	     (local-set-key (kbd "<f9>") #'ess-rdired)))
;; Close Rdired buffer with F9 as well:
(add-hook 'ess-rdired-mode-hook
	  '(lambda ()
	     (local-set-key (kbd "<f9>") #'kill-buffer-and-window)))

;; An example of window configuration:
(setq display-buffer-alist
      '(("*R Dired"
	 (display-buffer-reuse-window display-buffer-at-bottom)
	 (window-width . 0.5)
	 (window-height . 0.25)
	 (reusable-frames . nil))
	("*R"
	 (display-buffer-reuse-window display-buffer-in-side-window)
	 (side . right)
	 (slot . -1)
	 (window-width . 0.5)
	 (reusable-frames . nil))
	("*Help"
	 (display-buffer-reuse-window display-buffer-in-side-window)
	 (side . right)
	 (slot . 1)
	 (window-width . 0.5)
	 (reusable-frames . nil))))

;; Do not use company when using the vertico stack.
;;(use-package company
;;  :ensure t
;;  :config
;;  ;; Turn on company-mode globally:
;;  ;; (add-hook 'after-init-hook 'global-company-mode)
;;  ;; Only activate company in R scripts, not in R console:
;;  (setq ess-use-company 'script-only))
;;
;;;; Use F12 to trigger manually completion on R function args:
;;(add-hook 'ess-r-mode-hook
;;	  '(lambda ()
;;	     (local-set-key (kbd "<f12>") #'company-R-args)))
;;
;;;; More customization options for company:
;;(setq company-selection-wrap-around t
;;      ;; Align annotations to the right tooltip border:
;;      company-tooltip-align-annotations t
;;      ;; Idle delay in seconds until completion starts automatically:
;;      company-idle-delay 0.45
;;      ;; Completion will start after typing two letters:
;;      company-minimum-prefix-length 2
;;      ;; Maximum number of candidates in the tooltip:
;;      company-tooltip-limit 10)
;;
;;(use-package company-quickhelp
;;  :ensure t
;;  :config
;;  ;; Load company-quickhelp globally:
;;  (company-quickhelp-mode)
;;  ;; Time before display of documentation popup:
;;  (setq company-quickhelp-delay 0.3))

#+END_SRC


** F

*** F# (F sharp)

F# is the functional variant of C#.
Both are MicroSoft products.
Install fsharp with installer from MicroSoft.
The key libraries are installed in ~/Users/blaine/.dotnet~.
You may have to open a new terminal window to activate access to the executable dotnet.
Run the test code in hello.fsx with the command ~dotnet fsi hello.fsx~.
The contents of hello.fsx are ~printfn "Hello World from F#~.


There is a [[https://github.com/fsharp/emacs-fsharp-mode][fsharp-mode]] for Emacs that support editing fsharp files.
Install it from MELPA.

There is a eglot-fsharp package. Install it from MELPA.

There is a ob-fsharp package. Install it from MELPA.

#+BEGIN_SRC emacs-lisp
(use-package fsharp-mode
  :defer t
  :ensure t)

;; Enter M-x eglot to use the eglot lsp for fsharp.
(use-package eglot-fsharp)

;; Setting the path below requires finding fsharpi, which is a script that is mapped to fsi and that runs fsharp interactively.
;; I was not able to find the path to fsharpi, even though dotnet fsi works.
;; (setq inferior-fsharp-program "path/to/fsharpi --readline-")
#+END_SRC



** G

*** gscholar-bibtex

See scholar-importcf for alternative that also downloads the PDF while adding the Bibtex.


Usage: M-x gscholar-bibtex

Available commands in `gscholar-bibtex-mode’, i.e., in the window of search results:

    n/p: next/previous
    TAB: show BibTeX entry for current search result
    A/W: append/write to `gscholar-bibtex-database-file’ (see later)
    a/w: append/write to a file
    c: copy the current BibTeX entry
    x: close BibTeX entry window
    q: quit


[[https://github.com/cute-jumper/gscholar-bibtex?msclkid=eefb2bb1cfe111ec9dafc7fdc23a4ecd][Source]]

#+BEGIN_SRC emacs-lisp
(setq gscholar-bibtex-database-file "~/Documents/global.bib")
#+END_SRC

Use “A” or “W” to append or write to refs.bib, respectively.


*** Grammar checking
One grammar checker is not sufficient.
They tend to complement each other.

There are several options in Emacs
*** lsp-grammarly
*** langtool

I recommend lsp-grammarly.

**** grammar-mode

This package will only tell you if there is a grammarly error in the current document.
It is a decade old.
This [[https://vacuoustruth.com/post/grammar-checking-in-emacs/][webpage]] explains how to compile the C program (after making several tweaks of the Makefile) and install it on Mac OS.
This tutorial assumes that you have macports installed.
The code has to be retrieved from a Google [[https://code.google.com/archive/p/bcui-emacs/source][archive]].
I succeeded in compiling and installing the code as directed.


#+BEGIN_SRC emacs-lisp
;; Grammar Checker
;;(add-to-list 'load-path "~/.emacs.default/elisp/grammar/")
;;(add-to-list 'exec-path "~/.emacs.default/elisp/grammar/")
;;(autoload 'grammar-mode "grammar" nil t)
#+END_SRC


**** language-tool

Language-Tool is available as a free web service and as a stand-alone.
The web service has security concerns when connecting with Emacs, and the stand-alone has to be compiled.
It takes up 500 MB of space.
No free-lunch here!

Install the langtool [[https://github.com/mhayashi1120/Emacs-langtool][package]] from MELPA.

#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
;; git clone --depth 5 https://github.com/languagetool-org/languagetool.git
;; cd languagetool
;; mvn clean test
#+END_SRC
#+END_COMMENT

You may have to install apache-maven first and add it to your PATH.
You may also have to install Java8.
Maven is used to build language-tool.
The build takes 11 minutes or more.

I am baffled as to want to do next.
This route is for Java developers, which I am not, yet.


# #+BEGIN_SRC emacs-lisp
(setq langtool-language-tool-jar "/Users/blaine/software/languagetool-commandline.jar")
(require 'langtool)

(global-set-key "\C-x4w" 'langtool-check)
(global-set-key "\C-x4W" 'langtool-check-done)
(global-set-key "\C-x4l" 'langtool-switch-default-language)
(global-set-key "\C-x44" 'langtool-show-message-at-point)
(global-set-key "\C-x4c" 'langtool-correct-buffer)
# #+END_SRC



**** lsp-grammarly

You will need a Grammarly account.
You need to have `npm` installed.
Run the command suggested [[https://github.com/emacs-grammarly/lsp-grammarly#mag-method-2-login-with-emacs-a-bit-complicated][here]].
You need to install the keytar package in Emacs.

#+BEGIN_SRC emacs-lisp
;;(use-package keytar)
#+END_SRC


If you have VSCode, you can install the grammarly extension and then access your Grammarly account in the browser that pops open.
This activates the lsp-grammarly plugin in Emacs.
Otherwise, you can do this step in Emacs via a longer process.


#+BEGIN_SRC emacs-lisp
;;(use-package lsp-grammarly
;;  :ensure t
;;  :hook (text-mode . (lambda ()
;;                       (require 'lsp-grammarly)
;;                       (lsp-deferred))))  ; or lsp-deferred
#+END_SRC

Green squiggle lines appear under problem words, phrases, or sentences.
A pop menu also appears when a mouse cursor hovers over a green underlined spot.
Alternately, click on the yellow light bulb in the modeline to get an explanation in the minibuffer.

***** Evaluation

The plugin does not return suggested rewrites of sentences like the desktop application does with the premium account.
Having the plugin available is helpful, but it is better to paster the test into the desktop app, massively rewrite it if needed, and then paste this rewritten text back into Emacs.


**** Grammarly and flycheck

I am not sure what this is adding.

#+BEGIN_SRC emacs-lisp
;;(with-eval-after-load 'flycheck
;;  (flycheck-grammarly-setup))
#+END_SRC


** H



*** helpful


#+BEGIN_SRC emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-varaiable]. counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+END_SRC


*** Hippie expand

Enable a more powerful version of autocompletion of prose by mapping hippe-expand on top of the default dabbrev-exapnd.

#+BEGIN_SRC emacs-lisp
(global-set-key [remap dabbrev-expand]  'hippie-expand)
#+END_SRC



*** highlight-indent-guides

This is a new and well developed minor mode that is activated for most modes by the command below.
For details on how to customize the coloring and width of the guides, see [[this github repo][https://github.com/DarthFennec/highlight-indent-guides]].

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
#+END_SRC


*** hydra

Hydra empowers you to make custom keybindings that are repeated by entering a single key.
For example, by entering ~function <f2>  g g g~, you can zoom in three-fold.
[[Emacs Wiki page on hydra][https://www.emacswiki.org/emacs/Hydra]].
[[Hydra github site][Https://github.com/abo-abo/hydra]].

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t)

(defhydra hydra-zoom (global-map "<f2>")
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out"))

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))
#+END_SRC


** K

*** keycast

The [[https://metaredux.com/posts/2019/12/07/dead-simple-emacs-screencasts.html][keycast]] package enables the display of your keystrokes.
These can be displayed on the mode line when the bufer is in the keycast-mode.
This does not work by default when doom-mode-line is in use.
The keycast-tab-bar-mode works with doom-mode-line.
The following code shows the keystrokes on the doom-mode-line.
[[https://github.com/tarsius/keycast/issues/7][Source of the above code]].

Note that entering ~M-x keycast-tab-bar-mode~ sends the keystrokes to the tab bar.
Both keycast-mode and keycast-tab-bar-mode can run simultaneously.
I think the number of keystrokes shown needs to be expanded and the height of the modeline and the tabbar needs to be increased for this package to be useful.

I recommend the command-log-mode over keycast for screencasts.
I also recommend zooming in on the text.

#+BEGIN_SRC emacs-lisp
(use-package keycast
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  (add-to-list 'global-mode-string '("" keycast-mode-line)))
#+END_SRC



** L

*** which-key

This package provides a menu of available options after a short pause following the typing the first part of a command like ~C-x~.
A short demo is found at 7:30 in the [[https://www.youtube.com/watch?v=LtTjM245MC0][video]].
This is a helpful package for beginners.
It might be annoying for experienced users.

**** which-key integration:

Enhances the access to help information about keybindings, functions, and variables.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))
;;   (add-hook 'c-mode-hook 'lsp)
;; (add-hook 'c++-mode-hook 'lsp)
(add-hook 'clojure-mode-hook 'lsp)
;; (add-hook 'julia-mode-hook 'lsp)
(add-hook 'latex-mode-hook 'lsp)
(add-hook 'python-mode-hook 'lsp)
;; (add-hook 'R-mode-hook 'lsp)
(which-key-setup-side-window-right-bottom)
#+END_SRC



*** LanguageTool

I downloaded Language Tool and installed it in \url{~/.languagetool}.
See the README.md file on the[[https://github.com/PillFall/languagetool.el][github repo site]] for installation details. 
Invoke by entering ~M-x languagetool-check~.
Enter ~M-x languagetool-correct-at-point~ with the point on the underlined word.
This will invoke a transient minibuffer with all the suggestions.
Enter ~M-x languagetool-correct-buffer~ to check all the buffer, suggestion by suggestion.
To finish, enter ~M-x languagetool-clear-suggestions~.

#+BEGIN_SRC emacs-lisp
(use-package languagetool
  :ensure t
  :defer t
  :commands (languagetool-check
             languagetool-clear-suggestions
             languagetool-correct-at-point
             languagetool-correct-buffer
             languagetool-set-language
             languagetool-server-mode
             languagetool-server-start
             languagetool-server-stop)
  :config
  (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8")
        languagetool-console-command "~/.languagetool/languagetool-commandline.jar"
        languagetool-server-command "~/.languagetool/languagetool-server.jar"))

        (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8"))

        (setq languagetool-console-command "~/.languagetool/languagetool-commandline.jar"
              languagetool-server-command "~/.languagetool/languagetool-server.jar")
#+END_SRC


*** LaTeX customizations

**** AUCTeX

Configuration from latex-emacs.

#+BEGIN_SRC emacs-lisp
;;### auto-complete
;; do default config for auto-complete
;;(require 'auto-complete)
;;(require 'auto-complete-config)
;;(ac-config-default)
;;(ac-flyspell-workaround)



;;;### auto-complete-auctex.el --- auto-completion for auctex

;; Copyright (C) 2012 Christopher Monsanto

;; Author: Christopher Monsanto <chris@monsan.to>
;; Version: 1.0
;; Package-Requires: ((yasnippet "0.6.1") (auto-complete "1.4"))

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; You can install this by (require 'auto-complete-auctex).
;; Feel free to contribute better documentation!

;;;#### Code:

(require 'tex)
(require 'latex)

(eval-when-compile
  (require 'auto-complete)
  (require 'yasnippet))

(defvar ac-auctex-arg-lookup-table
  '((TeX-arg-define-macro . ("\\MacroName"))
    (TeX-arg-counter . ("Counter"))
    (TeX-arg-define-counter . ("\\CounterName"))
    (TeX-arg-file . ("Filename"))
    (TeX-arg-bibliography . ("Filename"))
    (TeX-arg-bibstyle . ("Style"))
    (TeX-arg-environment . ("Environment"))
    (TeX-arg-define-environment . ("EnvironmentName"))
    (TeX-arg-size . ("(w, h)"))
    (TeX-arg-ref . ("Name"))
    (TeX-arg-index . ("Index"))
    (TeX-arg-define-label . ("Label"))
    (LaTeX-arg-usepackage . (["opt1,..."] "Package"))
    (LaTeX-env-label . nil)
    (LaTeX-amsmath-env-aligned . (["htbp!"]))
    (LaTeX-amsmath-env-alignat . (["# Columns"]))
    (LaTeX-env-array . (["bct"] "lcrpmb|"))
    (LaTeX-env-item . nil)
    (LaTeX-env-document . nil)
    (LaTeX-env-figure . (["htbp!"]))
    (LaTeX-env-contents . ("Filename"))
    (LaTeX-env-minipage . (["htbp!"] "Width"))
    (LaTeX-env-list . ("Label" "\\itemsep,\\labelsep,..."))
    (LaTeX-env-picture . ("(w, h)" "(x, y)"))
    (LaTeX-env-tabular* . ("Width" ["htbp!"] "lcrpmb|><"))
    (LaTeX-env-bib . ("WidestLabel"))
    (TeX-arg-conditional . ([""]))
    (2 . ("" ""))
    (3 . ("" "" ""))
    (4 . ("" "" "" ""))
    (5 . ("" "" "" "" ""))
    (6 . ("" "" "" "" "" ""))
    (7 . ("" "" "" "" "" "" ""))
    (8 . ("" "" "" "" "" "" "" ""))
    (9 . ("" "" "" "" "" "" "" "" "")))
  "Anything not in this table defaults to '(\"\")")

(defun ac-auctex-expand-arg-info (arg-info)
  (loop for item in arg-info
	append (cond
		((or (stringp item) (and (vectorp item) (stringp (elt item 0))))
		 (list item))
		((vectorp item)
		 (loop for item-2 in (or (assoc-default (or (car-safe (elt item 0)) (elt item 0))
							ac-auctex-arg-lookup-table 'equal) '(""))
		       collect [item-2]))
		(t
		 (or (assoc-default (or (car-safe item) item) ac-auctex-arg-lookup-table) '(""))))))

(defun ac-auctex-snippet-arg (n arg)
  (let* ((opt (vectorp arg))
	 (item (if opt (elt arg 0) arg))
	 (m (if (vectorp arg) (1+ n) n))
	 (var (format "${%s}" item)))
    (list (1+ m)
	  (if opt
	      (concat (format "${[") var "]}")
	    (concat "{" var "}")))))

;;;#### Macros
;;

(defun ac-auctex-expand-args (str env)
  (yas/expand-snippet (ac-auctex-macro-snippet (assoc-default str env))))

(defun ac-auctex-macro-snippet (arg-info)
  (let ((count 1))
    (apply 'concat (loop for item in (ac-auctex-expand-arg-info arg-info)
			 collect (destructuring-bind (n val)
				     (ac-auctex-snippet-arg count item)
				   (setq count n)
				   val)))))

(defun ac-auctex-macro-candidates ()
   (let ((comlist (if TeX-symbol-list
		      (mapcar (lambda (item)
			        (or (car-safe (car item)) (car item)))
			    TeX-symbol-list))))
    (all-completions ac-prefix comlist)))

(defun ac-auctex-macro-action ()
  (yas/expand-snippet (ac-auctex-macro-snippet (assoc-default candidate TeX-symbol-list))))

(ac-define-source auctex-macros
  '((init . TeX-symbol-list)
    (candidates . ac-auctex-macro-candidates)
    (action . ac-auctex-macro-action)
    (requires . 0)
    (symbol . "m")
    (prefix . "\\\\\\([a-zA-Z]*\\)\\=")))

;;;#### Symbols

(defun ac-auctex-symbol-candidates ()
  (all-completions ac-prefix (mapcar 'cadr LaTeX-math-default)))

(defun ac-auctex-symbol-action ()
  (re-search-backward candidate)
  (delete-region (1- (match-beginning 0)) (match-end 0))
  (if (texmathp)
      (progn
	(insert "\\" candidate)
	(yas/expand-snippet (ac-auctex-macro-snippet (assoc-default candidate TeX-symbol-list))))
    (insert "$\\" candidate "$")
    (backward-char)
    (yas/expand-snippet (ac-auctex-macro-snippet (assoc-default candidate TeX-symbol-list)))))

(defun ac-auctex-symbol-document (c)
  (let* ((cl (assoc c (mapcar 'cdr LaTeX-math-default)))
         (decode (if (nth 2 cl) (char-to-string (decode-char 'ucs (nth 2 cl))) ""))
         (st (nth 1 cl))
         (hs (if (listp st) (mapconcat 'identity st " ") st)))
    (and decode (concat hs " == " decode))))

(ac-define-source auctex-symbols
  '((init . LaTeX-math-mode)
    (candidates . ac-auctex-symbol-candidates)
    (document . ac-auctex-symbol-document)
    (action . ac-auctex-symbol-action)
    (requires . 0)
    (symbol . "s")
    (prefix . "\\\\\\([a-zA-Z]*\\)\\=")))


;;;#### Environments

(defvar ac-auctex-environment-prefix "beg")

(defun ac-auctex-environment-candidates ()
  (let ((envlist (mapcar (lambda (item) (concat ac-auctex-environment-prefix (car item)))
			 LaTeX-environment-list)))
    (all-completions ac-prefix envlist)))

(defun ac-auctex-environment-action ()
  (re-search-backward candidate)
  (delete-region (1- (match-beginning 0)) (match-end 0))
  (let ((candidate (substring candidate (length ac-auctex-environment-prefix))))
    (yas/expand-snippet (format "\\begin{%s}%s\n$0\n\\end{%s}"
				candidate
				(ac-auctex-macro-snippet (assoc-default candidate LaTeX-environment-list))
				candidate))))

(ac-define-source auctex-environments
  '((init . LaTeX-environment-list)
    (candidates . ac-auctex-environment-candidates)
    (action .  ac-auctex-environment-action)
    (requires . 0)
    (symbol . "e")
    (prefix . "\\\\\\([a-zA-Z]*\\)\\=")))


;;;#### Refs

(defun ac-auctex-label-candidates ()
  (all-completions ac-prefix (mapcar 'car LaTeX-label-list)))

(ac-define-source auctex-labels
  '((init . LaTeX-label-list)
    (candidates . ac-auctex-label-candidates)
    (requires . 0)
    (symbol . "r")
    (prefix . "\\\\ref{\\([^}]*\\)\\=")))


;;;#### Bibs

(defun ac-auctex-bib-candidates ()
  (all-completions ac-prefix (mapcar 'car LaTeX-bibitem-list)))

(ac-define-source auctex-bibs
  `((init . LaTeX-bibitem-list)
    (candidates . ac-auctex-bib-candidates)
    (requires . 0)
    (symbol . "b")
    (prefix . ,(concat "\\\\cite"
		       "\\(?:"
		         "\\[[^]]*\\]"
		       "\\)?"
		       "{\\([^},]*\\)"
		       "\\="))))

;;;#### Setup

(defun ac-auctex-setup ()
  (setq ac-sources (append
                      '(ac-source-auctex-symbols
                        ac-source-auctex-macros
			ac-source-auctex-environments
			ac-source-auctex-labels
			ac-source-auctex-bibs)
                      ac-sources)))

(add-to-list 'ac-modes 'latex-mode)
(add-hook 'LaTeX-mode-hook 'ac-auctex-setup)

(provide 'auto-complete-auctex)

;;; auto-complete-auctex.el ends here

;; indent with spaces instead of tabs for pep8 compatibility
(setq tab-width 4)
(setq-default indent-tabs-mode nil)
#+END_SRC


**** PATH to info

Set path to info for texlive.
This path is needed by the LSP for LaTeX.
[[https://github.com/astoff/digestif][See for more information.]]

#+BEGIN_SRC emacs-lisp
(add-to-list 'Info-directory-list "/opt/local/share/texmf-texlive/doc/info")
#+END_SRC

**** LSP in LaTeX
digestif is an LSP for LaTeX.
Install it via this command in the terminal ~luarocks install digestif~.
To see what lsp can do in C++, [[https://www.youtube.com/watch?v=SVeiNWU4BBg][watch]].

#+BEGIN_SRC emacs-lisp
(setq lsp-tex-server 'digestif)
#+END_SRC

**** automate snippet insertion

If you want automatic snippet insertion upon choosing a completion candidate,
make sure to activate yas-minor-mode before starting up Eglot.

#+BEGIN_SRC emacs-lisp
;; (yas-reload-all)
(add-hook 'LaTeX-mode-hook #'yas-minor-mode)
#+END_SRC

**** eglot in LaTeX mode

Emacs's polyglot lsp server.
[[https://github.com/joaotavora/eglot][Eglot]] provides completion, documentation, and navigation commands in LaTeX documents.
Must come after yas-minor-mode.
Add a hook for to invoke eglot in LaTeX-mode.
But you must install digestif first
[[https://www.manueluberti.eu/emacs/2022/03/12/eglot-digestif/][Source]].
Invoke eglot with ~M-x eglot~ or make it available on startup:

#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook #'eglot-ensure)
#+END_SRC

Note that eglot has no dependences, but bleeding-edge Emacs versions have dependencies that can mess it up.
Enter ~M-x find-libraries~

**** Enlarge equation preview

Set the scale of the preview of the LaTeX equation so you can see it.
Place the  point in equation and enter ~C-c C-x C-l~ to render.

#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 4.0))
#+END_SRC


**** Grammer checking with language-tool


#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook
          (lambda ()
             (add-hook 'after-save-hook 'langtool-check nil 'make-it-local)))
#+END_SRC


**** Spell check with flyspell

Run the command ~M-x flyspell-buffer~ or ~M-x flys-bu~.


**** Turn on ispell for tex fileset

This recommendation is from the 2020 edtion of Petersen's book /Mastering Emacs/, page 250.

#+BEGIN_SRC emacs-lisp
(add-hook 'tex-mode-hook
      #'(lambda () (setq ispell-parser 'tex)))
#+END_SRC




*** Word count in LaTeX files

Run texcount.pl on an open tex document in the current buffer to get a report of word counts by section.
Enter ~C-c w~. [[https://newbedev.com/word-count-for-latex-within-emacs][Source]].

#+BEGIN_SRC emacs-lisp
(defun my-latex-setup ()
  (defun latex-word-count ()
    (interactive)
    (let* ((this-file (buffer-file-name))
           (word-count
            (with-output-to-string
              (with-current-buffer standard-output
                (call-process "texcount" nil t nil "-brief" this-file)))))
      (string-match "\n$" word-count)
      (message (replace-match "" nil nil word-count))))
    (define-key LaTeX-mode-map "\C-cw" 'latex-word-count))
(add-hook 'LaTeX-mode-hook 'my-latex-setup t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun latex-word-count ()
  (interactive)
  (shell-command (concat "/usr/local/bin/texcount.pl"))
                          (buffer-file-name) )
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; local configuration for TeX modes
(defun my-latex-mode-setup ()
  (setq-local company-backends
              (append '((company-math-symbols-latex company-latex-commands))
                      company-backends)))

(add-hook 'tex-mode-hook 'my-latex-mode-setup)
#+END_SRC


**** Configuration from my [[https://github.com/MooersLab/latex-emacs][latex-emacs profile]]

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p `auctex) (package-install `auctex))

(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)

(setq doc-view-continuous t) ;; scroll over all pages in doc view

;; Settings for minted package issue
(eval-after-load "tex"
  '(setcdr (assoc "LaTeX" TeX-command-list)
          '("%`%l%(mode) -shell-escape%' %t"
          TeX-run-TeX nil (latex-mode doctex-mode) :help "Run LaTeX")
    )
  )

; Outline-minor-mode key map Source: https://www.emacswiki.org/emacs/OutlineMinorMode
(define-prefix-command 'cm-map nil "Outline-")
; HIDE
(define-key cm-map "q" 'hide-sublevels)    ; Hide everything but the top-level headings
(define-key cm-map "t" 'hide-body)         ; Hide everything but headings (all body lines)
(define-key cm-map "o" 'hide-other)        ; Hide other branches
(define-key cm-map "c" 'hide-entry)        ; Hide this entry's body
(define-key cm-map "l" 'hide-leaves)       ; Hide body lines in this entry and sub-entries
(define-key cm-map "d" 'hide-subtree)      ; Hide everything in this entry and sub-entries
; SHOW
(define-key cm-map "a" 'show-all)          ; Show (expand) everything
(define-key cm-map "e" 'show-entry)        ; Show this heading's body
(define-key cm-map "i" 'show-children)     ; Show this heading's immediate child sub-headings
(define-key cm-map "k" 'show-branches)     ; Show all sub-headings under this heading
(define-key cm-map "s" 'show-subtree)      ; Show (expand) everything in this heading & below
; MOVE
(define-key cm-map "u" 'outline-up-heading)                ; Up
(define-key cm-map "n" 'outline-next-visible-heading)      ; Next
(define-key cm-map "p" 'outline-previous-visible-heading)  ; Previous
(define-key cm-map "f" 'outline-forward-same-level)        ; Forward - same level
(define-key cm-map "b" 'outline-backward-same-level)       ; Backward - same level
(global-set-key "\M-o" cm-map)
#+END_SRC


**** My LaTeX helper functions


***** M-x description

Converts a selected list into a description list.
The elements of the list must begin with a dash.
The terms to be inserted into the square brackets
have to be added after running the function.


#+BEGIN_SRC emacs-lisp
(defun description (beg end)
 "wrap the active region in an description environment,
  converting hyphens at the beginning of a line to item"
  (interactive "r")
  (save-restriction
    (narrow-to-region beg end)
    (beginning-of-buffer)
    (insert "\\begin{description}\n")
    (while (re-search-forward "^- " nil t)
      (replace-match "\\\\item[ ]"))
    (end-of-buffer)
    (insert "\\end{description}\n")))
#+END_SRC



***** M-x enumerate

Converts a selected list into an enumerated list.
The elements of the list must begin with a dash.

#+BEGIN_SRC emacs-lisp
(defun enumerate (beg end)
  "wrap the active region in an enumerate environment,
  converting hyphens at the beginning of a line to item"
  (interactive "r")
  (save-restriction
    (narrow-to-region beg end)
    (beginning-of-buffer)
    (insert "\\begin{enumerate}\n")
    (while (re-search-forward "^- " nil t)
      (replace-match "\\\\item "))
    (end-of-buffer)
    (insert "\\end{enumerate}\n")))
#+END_SRC



***** M-x itemize

Converts a selected list into an itemized list.
The elements of the list must begin with a dash.
A similar function could be made to make an enumerated list
and a description list.

Source: \url{https://tex.stackexchange.com/questions/118958/emacsauctex-prevent-region-filling-when-inserting-itemize}

#+BEGIN_SRC emacs-lisp
(defun itemize (beg end)
 "wrap the active region in an itemize environment,
  converting hyphens at the beginning of a line to item"
  (interactive "r")
  (save-restriction
    (narrow-to-region beg end)
    (beginning-of-buffer)
    (insert "\\begin{itemize}\n")
    (while (re-search-forward "^- " nil t)
      (replace-match "\\\\item "))
    (end-of-buffer)
    (insert "\\end{itemize}\n")))
#+END_SRC

Now I need map the above three functions to keybindings.
I also need to make functions to convert list in LaTeX to lists in Org-mode or markdown.


*** LSP


**** To use debugger
Invoke already under the Python config. dap works for only Python and Java.
#+BEGIN_SRC emacs-lisp
(use-package dap-mode)
;; (use-package dap-python) ;to load the dap adapter for your language
#+END_SRC



**** Eglot LSP

#+BEGIN_SRC emacs-lisp
(use-package eglot
   :ensure t)
(add-hook 'python-mode-hook 'eglot-ensure)
(add-hook 'latex-mode-hook 'eglot-ensure)
(add-hook 'julia-mode-hook 'eglot-ensure)
(add-to-list 'eglot-server-programs '(markdown-mode . ("marksman")))
(add-hook 'markdown-mode-hook #'eglot-ensure)
;; (add-hook 'R-mode-hook 'eglot-ensure)
#+END_SRC


**** Microsoft's pyright LSP

#+BEGIN_SRC emacs-lisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
#+END_SRC



#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
 :ensure t)
(use-package lsp-treemacs
  :ensure t)
(add-hook 'latex-mode 'lsp)
(add-hook 'python-mode 'lsp)
(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (yas-global-mode))
#+END_SRC


*** lsp

For each programming language, you have to install the corresponding LSP server.
Some lsps of these are be installed using the command ~M-x lsp-install-server RET <selected server>~ (marked * below), which are external programs.
Issuing of the ~M-x lsp~ command (or ~s-l w s~ where the first ~s~ is the Super key, mapped to the Option key near the top of this config file) can trigger the installation of the lsp server if missing.
Some languages have alternate LSPs.

|--------------+-------------|
| Language     |  Sever      |
|--------------+-------------|
| C/C++        | clangd      |
| Clojure      | clojure-lsp |
| LaTeX        | digestif    |
| Python       | mspyls      |
|--------------+-------------|

The lsp is invoked by entering ~M-x lsp~ or ~s-l~.
The server make take a minute or so to spin up while analyzing the current file.
If you get the error message, file not in project or it is backlisted, and
if there is a ~.git~ repo present, the file is in a project.
Then there is an issue with the project being blacklisted.
Remove the backlist with the command ~M-x lsp-workspace-blacklist-remove~.


**** Main lsp config

The github webpage for this [[https://emacs-lsp.github.io/lsp-mode/page/installation/][project]] has a lot of information.
https://emacs-lsp.github.io/lsp-ui/
https://www.taingram.org/blog/emacs-lsp-ide.html

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l", "s-l")
  (setq lsp-keymap-prefix "s-l")
  :hook (; replace XXX-mode with concrete major-mode (e. g. python-mode)
         (clojure-mode . lsp)
         (clojurec-mode . lsp)
         (clojurescript-mode . lsp)
         (latex-mode . lsp)
         (python-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
   :config
   ;; add paths to your local installation of project mgmt tools, like lein
   (setenv "PATH" (concat
                    "/Users/blaine/bin" path-separator
                    (getenv "PATH")))
   (dolist (m '(clojure-mode
                clojurec-mode
                clojurescript-mode
                clojurex-mode))
      (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))
   (setq lsp-clojure-server-command '("/usr/local/bin/clojure-lsp")) ;; Optional: In case `clojure-lsp` is not in your $PATH
   :commands (lsp)
)
#+END_SRC

***** Add lsp-ui for the full experience.


#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :hook (lsp-mode . lsp-ui-imenu)
  :hook (lsp-mode . lsp-ui-doc-mode)
  :hook (lsp-mode . lsp-ui-doc-show)
  :hook (lsp-mode . lsp-ui-doc-frame-mode)
  :hook (lsp-mode . anaconda-mode)
  :hook (lsp-mode . anaconda-eldoc-mode)
)
(setq lsp-ui-doc-position 'right)
(setq lsp-ui-sideline-enable t)
(setq lsp-ui-sideline-show-hover t)
(setq anaconda-mode t)
(setq lsp-eldoc-render-all t)
#+END_SRC

Use lsp-treemacs.

#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
  :after lsp)
#+END_SRC







** M


*** magit

This package supports the use of git in Emacs.
Dave Wilson's [[https://raw.githubusercontent.com/daviwil/emacs-from-scratch/500370fa06889dad313e60473d73090fcfbe106d/init.el][config for magit]].
See his [[https://www.youtube.com/watch?v=INTu30BHZGk][video on magit]] starting at 30:00.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;;(use-package evil-magit
;;  :after magit)

;; NOTE: Make sure to configure a GitHub token before using this package!
;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
#+END_SRC






*** markdown-mode

I adapted it to edit README.md files for GitHub following this suggested [[https://blog.bitsandbobs.net/blog/emacs-markdown-live-preview/][configuration]].

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (" \\.md\\'" . gfm-mode)
  :commands (markdown-mode gfm-mode)
  :config
  (setq markdown-command "pandoc -t html5")
  :hook (markdown-mode . lsp)
  :config
    (require 'lsp-marksman)
  )
#+END_SRC


Install simple-httpd and impatient-mode packages.

#+BEGIN_SRC emacs-lisp
(use-package simple-httpd
  :ensure t
  :config
  (setq httpd-port 7070)
  (setq httpd-host (system-name)))
#+END_SRC

The impatient-mode package takes the content of your buffer, passes it through a filter, and serves the result via simple-httpd HTTP server.


#+BEGIN_SRC emacs-lisp
(use-package impatient-mode
  :ensure t
  :commands impatient-mode)
#+END_SRC

Create a filter function to process the Markdown buffer.
The function my-markdown-filter uses github-markdown-css to mimic the look of GitHub.

#+BEGIN_SRC emacs-lisp
(defun my-markdown-filter (buffer)
  (princ
   (with-temp-buffer
     (let ((tmp (buffer-name)))
       (set-buffer buffer)
       (set-buffer (markdown tmp))
       (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.min.css\"/>
<body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
   (current-buffer)))
#+END_SRC


Create the function my-markdown-preview to show the preview.

#+BEGIN_SRC emacs-lisp
(defun my-markdown-preview ()
  "Preview markdown."
  (interactive)
  (unless (process-status "httpd")
    (httpd-start))
  (impatient-mode)
  (imp-set-user-filter 'my-markdown-filter)
  (imp-visit-buffer))
#+END_SRC

Run my-markdown-preview in any Markdown buffer.
It will open a new window in your browser and update it as you type.

*** mathpix

This is an interfae to Mathpix \footnote{\url{https://github.com/jethrokuan/mathpix.el}}.
It requires the Mathpix.app and the key (i.e., you have to subscribe to this service).


Here is the configuration to load the package from github via straight.
Remember that use-package is a macro that can be used with either straight or package.
I want to avoid the use of straight.el.
I downloaded via git clone the mathpix.el repo.

I renamed it mathpix.
I am getting the need for five arguments with the require command.
I have only three.
I need a use-package version.
I am stumped

#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.default30/elisp/mathpix")
(use-package mathpix
  :ensure t
  :custom ((mathpix-app-id "app-id")
           (mathpix-app-key "app-key"))
  :bind
  ("C-x m" . mathpix-screenshot))
;; maybe a required setting for Macs
(setq mathpix-screenshot-method "screencapture -i %s")
#+END_SRC
#+END_COMMENT



*** mode-line clean-up

#+BEGIN_SRC emacs-lisp
(defvar mode-line-cleaner-alist
  `((auto-complete-mode . " α")
    (yas-minor-mode . " γ")
    (paredit-mode . " Φ")
    (eldoc-mode . "")
    (abbrev-mode . "")
    (undo-tree-mode . " τ")
    (volatile-highlights-mode . " υ")
    (elisp-slime-nav-mode . " δ")
    (nrepl-mode . " ηζ")
    (nrepl-interaction-mode . " ηζ")
    ;; Major modes
    (clojure-mode . "λ")
    (hi-lock-mode . "")
    (python-mode . "Py")
    (emacs-lisp-mode . "EL")
    (markdown-mode . "md"))
  "Alist for `clean-mode-line'.
When you add a new element to the alist, keep in mind that you
must pass the correct minor/major mode symbol and a string you
want to use in the modeline *in lieu of* the original.")
#+END_SRC

Greek letters - `C-u C-\` greek.

`C-\` to revert to default.

`ς ε ρ τ υ θ ι ο π α σ δ φ γ η ξ κ λ ζ χ ψ ω β ν μ`



#+BEGIN_SRC emacs-lisp
(defun clean-mode-line ()
  (interactive)
  (loop for cleaner in mode-line-cleaner-alist
        do (let* ((mode (car cleaner))
                 (mode-str (cdr cleaner))
                 (old-mode-str (cdr (assq mode minor-mode-alist))))
             (when old-mode-str
                 (setcar old-mode-str mode-str))
               ;; major mode
             (when (eq mode major-mode)
               (setq mode-name mode-str)))))
(add-hook 'after-change-major-mode-hook 'clean-mode-line)
#+END_SRC

Alias the new `flymake-report-status-slim' to `flymake-report-status'

#+BEGIN_SRC emacs-lisp
(defun flymake-report-status-slim (e-w &optional status)
  "Show \"slim\" flymake status in mode line."
  (when e-w
    (setq flymake-mode-line-e-w e-w))
  (when status
    (setq flymake-mode-line-status status))
  (let* ((mode-line " Φ"))
    (when (> (length flymake-mode-line-e-w) 0)
      (setq mode-line (concat mode-line ":" flymake-mode-line-e-w)))
    (setq mode-line (concat mode-line flymake-mode-line-status))
    (setq flymake-mode-line mode-line)
    (force-mode-line-update)))
(defalias 'flymake-report-status 'flymake-report-status-slim)
#+END_SRC





*** multiple-cursors

Package by Magnar Sveen, [[source][https://github.com/magnars/multiple-cursors.el]],
the author of emacsrocks.com YouTube video series. 

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
    :ensure t)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC




** N


** O



*** Org configuration

This is a great [[https://www.youtube.com/watch?v=hnMntOQjs7Q][demo]] of the basics of org-mode in five minutes.

#+BEGIN_SRC emacs-lisp
;; (use-package org)
;; Open a fileset in separate windows.
(define-key global-map "\C-cfo" 'filesets-open)
;; Open a fileset in separate windows.
(define-key global-map "\C-cfc" 'filesets-close)
#+END_SRC


Setting to open dvi in place of pdf-tools for a sharper view.

#+BEGIN_SRC emacs-lisp
(setq org-latex-create-formula-image-program 'dvisvgm)
#+END_SRC


*** org2blog configuration

This package connects the Emacs to your WordPress account.
You write posts in org and then publish them in WordPress.

#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
(use-package org2blog
             :ensure t)
(setq org2blog/wp-blog-alist
      '(("myblog"
         :url "http://bmooerslab.wordpress.com/xmlrpc.php"
         :username "blaine-mooers@ouhsc.edu")))
#+END_SRC
#+END_COMMENT

*** org-ac

See the GitHUb [[https://github.com/aki2o/org-ac][repo]].

#+BEGIN_SRC emacs-lisp
(use-package org-ac)
(org-ac/config-default)
#+END_SRC



*** Org configuration

This is a great [[https://www.youtube.com/watch?v=hnMntOQjs7Q][demo]] of the basics of org-mode in five minutes.

#+BEGIN_SRC emacs-lisp
;; (use-package org)
;; Open a fileset in separate windows.
(define-key global-map "\C-cfo" 'filesets-open)
;; Open a fileset in separate windows.
(define-key global-map "\C-cfc" 'filesets-close)
#+END_SRC


Setting to open dvi in place of pdf-tools for a sharper view.

#+BEGIN_SRC emacs-lisp
(setq org-latex-create-formula-image-program 'dvisvgm)
#+END_SRC



*** org-agenda

Org-agenda in my default emacs config is not showing the current day'a agenda view.
I swapped in the config from latex-emacs where it is working.

# The following code configures the org-agenda menu.
# It is configured following the great blog post by a research software engineer, [[https://tlestang.github.io/blog/keeping-track-of-tasks-and-projects-using-emacs-and-org-mode.html][Thibault Lestang]].
# This is the best intoduction to org-agenda for academcis that I have read.
# I recommended starting with it.
# Eventually, you should read the org-agenda chapter in the Org-mode manual.
# 
# Note that paths to the org files used by org-agenda are stored in init.el.
# I am not sure why.
# 
# I was using /tasks.org/, /tickler.org/, and the /proj.org/.
# /ticker.org/ has the recurring events programmed to pop up in agenda several days or several in advance of the events.
# I do not see the point of keeping projects separate from tasks.
# 
# 
# Note that errors in time format in tasks.org will choke the startup of config.org because tasks.org is read on startup to setup org-agenda.
# Run ~M-x org-lint~ to find the errors in the tasks.org file.
# You should run it on the config.org file too from time to time.
# 
# Note that you should not worry about the default start date at 0800 in the agenda view.
# I wasted an hour or more trying to configure this feature.
# If you schedule an event at 0400, it will show up in the agenda as starting at 0400.
# 
# ~C-c .~  is entered on an event line will open the calendar for selecting the date with the mouse to set a plain time stamp.
# Use this for most events.
# 
# Use ~C-c C-s~ to set timestamps with the scheduled keyword.
# This is for events that are not to be started until the scheduled time.
# 
# Use ~C-s C-d~ to set timestamps with the deadline keyword.
# The format of the data must by YYYY-MM-DD.
# Single digit months and days must be accompanied by a zero in the left position.
# 
# 
# **** Configuration of org-agenda that addresses the 10,000 folder hypothesis
# 
# A project is an activity that is composed of more than one task.
# I hypothesized that most academics will not have more than 10,000 projects in a 30+ year career.
# That is about one new project per working day in a 30 year career.
# Most will probably have 2000 to 3000 projects.
# 
# In analogy to the Dewy Decimal system, I have divided projects into ten categories.
# I use only a numeric codes for the indices.
# I also use 10,000 top level categories rather than 1000.
# The first category are journal articles.
# Other than your graduate students and books, peer-reviewed journal articles are your legacy and your currency for establishing credibility in grant applications.
# Each category has been assigned a range of 1000 numeric indices.


#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
;; org-capture
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-cl" 'org-store-link)

(setq org-agenda-files '("/Users/blaine/gtd/tasks/JournalArticles.org"
 "/Users/blaine/gtd/tasks/Proposals.org"
 "/Users/blaine/gtd/tasks/Books.org"
 "/Users/blaine/gtd/tasks/Talks.org"
 "/Users/blaine/gtd/tasks/Posters.org"
 "/Users/blaine/gtd/tasks/ManuscriptReviews.org"
 "/Users/blaine/gtd/tasks/Private.org"
 "/Users/blaine/gtd/tasks/Service.org"
 "/Users/blaine/gtd/tasks/Teaching.org"
 "/Users/blaine/gtd/tasks/Workshops.org"))

;; Cycle through these keywords with shift right or left arrows.
(setq org-todo-keywords
        '((sequence "TODO(t)" "INITIATED(i!)" "WAITING(w!)" "CAL(a)" "SOMEDAY(s!)" "PROJ(j)" "|" "DONE(d!)" "CANCELLED(c!)")))
#+END_SRC

Set the target files for refiling.
The Projects are at headline level 2 while the TODOs are at headline level 3.

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '(("/Users/blaine/gtd/tasks/JournalArticles.org" :maxlevel . 2)
   ("/Users/blaine/gtd/tasks/Proposals.org" :maxlevel . 2)
   ("/Users/blaine/gtd/tasks/Books.org" :maxlevel . 2)
   ("/Users/blaine/gtd/tasks/Talks.org" :maxlevel . 2)
   ("/Users/blaine/gtd/tasks/Posters.org" :maxlevel . 2)
   ("/Users/blaine/gtd/tasks/ManuscriptReviews.org" :maxlevel . 2)
   ("/Users/blaine/gtd/tasks/Private.org" :maxlevel . 2)
   ("/Users/blaine/gtd/tasks/Service.org" :maxlevel . 2)
   ("/Users/blaine/gtd/tasks/Teaching.org" :maxlevel . 2)
   ("/Users/blaine/gtd/tasks/Workshops.org" :maxlevel . 2)))
(setq org-refile-use-outline-path 'file)
#+END_SRC



***** Customized agenda views

These are my customized agenda views by project.
The letter is the last parameter.
For example, enter ~C-c a b~ and then enter 402 at the prompt to list all active tasks related to 402 tasks.

I learned about this approach [[https://tlestang.github.io/blog/keeping-track-of-tasks-and-projects-using-emacs-and-org-mode.html][here]].

The CATEGORY keyword resides inside of a Properties drawer.
The drawers are usually closed.
I am having trouble opening my drawers in my org files.
In addition, I do not want to have to add a drawer to each TODO.

I am now loving Tags.
I may switch to using Tags because they are visible in org files.
I tried and they are not leading to the expect list of TODOs in org-agenda.
I am stumped.

In the meantime, enter ~C-c \~ inside the appropriate org file to narrow the focus to the list of TODOs or enter ~C-c i b~ to get an indirect buffer with the subtree for the matched tag.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(
	("b"
             "List of all active 402 tasks."
             tags-todo
             "402/TODO|INITIATED|WAITING")
	("c"
             "List of all active 523 RNA-drug crystallization review paper tasks."
             tags-todo
             "CATEGORY=\"523\"/TODO|INITIATED|WAITING")
	("d"
             "List of all active 485PyMOLscGUI tasks."
             tags-todo
             "CATEGORY=\"485\"/TODO|INITIATED|WAITING")
	("e"
             "List of all active 2104 Emacs tasks"
             tags-todo
             "2104+CATEGORY=\"2104\"/NEXT|TODO|INITIATED|WAITING")
	("n"
             "List of all active 651 ENAX2 tasks"
             tags-todo
             "651+CATEGORY=\"651\"/NEXT|TODO|INITIATED|WAITING")
	("q"
             "List of all active 561 charge density review"
             tags
             "561+CATEGORY=\"211\"/NEXT|TODO|INITIATED|WAITING")
	("r"
             "List of all active 211 rcl/dnph tasks"
             tags-todo
             "211+CATEGORY=\"211\"/NEXT|TODO|INITIATED|WAITING")
	("P"
         "List of all projects"
         tags
         "LEVEL=2/PROJ")))
#+END_SRC


***** org-agenda-show-deadlines

Show deadlines in org-agenda buffers by actvating this minor mode.
[[Source][https://github.com/legalnonsense/org-agenda-show-deadlines]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.default30/manual-packages/org-agenda-show-deadlines/")
(require 'org-agenda-show-deadlines)
(setq org-agenda-show-deadlines-column 44)
#+END_SRC

***** Customized org-captures with prompt for project headline

I usually know the project to which I want to assign a task.
I loathe having to come back latter to refile my tasks.
I want to do the filing at the time of capture.
I found a solution [[https://stackoverflow.com/questions/9005843/interactively-enter-headline-under-which-to-place-an-entry-using-capture][here]].

A project has two or more tasks.
I believe that the 10,000 projects is the upper limit for a 30 year academic career.
There are about 10,000 workdays in a 30 year career if you work six days a week.
Of course, most academics work seven a week and many work longer than 30 years, some even reach 60 years.

I have my projects split into ten org files.
Each org file has a limit of 1000 projects for ease of scrolling.

It is best to let Emacs insert new task because it is easy to accidently delete sectons in an org file, especially when sections are folded.
(I know that many love folded sections.
There is a strong appeal to being able to collapse secitons of text.
However, folded section are not for me; I have experienced too many catastrophes.
I open all of my org files with all sections fully open.
I can use swiper to navigate if I do not want to scroll.)

Enter ~C-c c~ to start the capture menu.
The settings below show a single letter option for selecting the appropriate destination org-file.
After entering the single-letter code, you are prompted for the PROJ headline.
You do not have to include the PROJ keyword.
You should probably enter the full headline name the first time that you capture a TODO.
Then on the second submission, the headline name will be auto suggested after you start to type it.
You just hit tab to autocomplete its entry into the capture form.
You might start the headline with the project ID number to ease prompting the autocompletion.

I tried changing the "Headline" variable to "Tag" in the org-ask-location fuction, 
but this lead to confusing mix of success and failure because I had some headlines with the project number which I was also using as a tag.
It would be great if this function could search on the tag, but its is hardwired for headlines.

If the headline is not matched, a new entry at the bottom of the file will be started.
You can open the destinaton org file in a separate buffer and watch where the new TODO entry is being placed.
If it is going to the wrong place, enter ~C-c C-k~ to kill the process.
Then start over with ~C-c C-c~ with the correct headline.

The erractic behavior of this approach is disappointing for those who want to do capture and filing on one operation.
One partial solution is to use assigned keys to specific projects and to use the headline rather than the tag to find the place to insert the new item.
This solution works well.

The code can be edited as new projects are added and old projects are retired.
The limit to this approach is 26 lower case, 26 upper case, and 10 digits: 62.
A way of out of this limit is to use hydras.


This protocol can be executed from inside the target org file or from a different buffer.

I learned about the following function from
[[https://stackoverflow.com/questions/9005843/interactively-enter-headline-under-which-to-place-an-entry-using-capture][Lionel Henry]] with the modification by Phil on July 1, 2018.
I modified the function ~org-ask-location~ to write out at the bottom of the file new projects as "** PROJ" <headline>.
I also modified the ~org-capture-templates~ to write out ~*** TODO ~.

Emacs Notes Capture From PDF [[https://www.youtube.com/watch?v=51bvZH9qjBw][source]]

#+BEGIN_SRC emacs-lisp
(defun org-ask-location ()
  (let* ((org-refile-targets '((nil :maxlevel . 9)))
         (hd (condition-case nil
                 (car (org-refile-get-location "Headline" nil t))
               (error (car org-refile-history)))))
    (goto-char (point-min))
    (outline-next-heading)
    (if (re-search-forward
         (format org-complex-heading-regexp-format (regexp-quote hd))
         nil t)
        (goto-char (point-at-bol))
      (goto-char (point-max))
      (or (bolp) (insert "\n"))
      (insert "** PROJ " hd "\n")))
  (end-of-line))

(setq org-refile-allow-creating-parent-nodes (quote confirm))

(setq org-capture-templates
 '(
   ("j" "JournalArticles" entry
    (file+function "/Users/blaine/gtd/tasks/JournalArticles.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ("0" "018 JournalArticle" entry
     (file+headline "/Users/blaine/gtd/tasks/JournalArticles.org" "PROJ 018FrancisRNAdrug")
     "*** TODO %^{title}\n:Properties:\n:CATEGORY: 018\n:END:\n <%<%Y-%m-%d %a %T>>\n%^{Add your notes here. Enter C-c C-c when finished.}\n %?"
     :empty-lines 1)

     ("1" "523 JournalArticle" entry
      (file+headline "/Users/blaine/gtd/tasks/JournalArticles.org" "PROJ 523 RNA drug crystallization")
      "*** TODO %^{title}\n:Properties:\n:CATEGORY: 523\n:END:\n <%<%Y-%m-%d %a %T>>\n%^{Add your notes here. Enter C-c C-c when finished.}\n %?"
      :empty-lines 1)

    ("g" "GrantProposals" entry
    (file+function "/Users/blaine/gtd/tasks/Proposals.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ("b" "Books" entry
    (file+function "/Users/blaine/gtd/tasks/Books.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ("t" "Talks" entry
    (file+function "/Users/blaine/gtd/tasks/Talks.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ("P" "Posters" entry
    (file+function "/Users/blaine/gtd/tasks/Posters.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ("p" "PDF-Notes" entry (file "/Users/blaine/org/pdfnotes.org")
    "* %?\n%(org-capture-pdf-active-region)\n")
    ("r" "ManuscriptReviews" entry
    (file+function "/Users/blaine/gtd/tasks/ManuscriptReviews.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ("v" "Private" entry
    (file+function "/Users/blaine/gtd/tasks/Private.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ("s" "Service" entry
    (file+function "/Users/blaine/gtd/tasks/Service.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ("T" "Teaching" entry
    (file+function "/Users/blaine/gtd/tasks/Teaching.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ("w" "Workshop" entry
    (file+function "/Users/blaine/gtd/tasks/Workshops.org" org-ask-location)
    "\n\n*** TODO %?\n<%<%Y-%m-%d %a %T>>"
    :empty-lines 1)
    ))
#+END_SRC





*** Org-capture active region of pdf-view buffer

#+BEGIN_SRC emacs-lisp
(defun org-capture-pdf-active-region ()
  "Capture the active region of the pdf-view buffer."
  (let* ((pdf-buf-name (plist-get org-capture-plist :original-buffer))
         (pdf-buf (get-buffer pdf-buf-name)))
    (if (buffer-live-p pdf-buf)
         (with-current-buffer pdf-buf
            (car (pdf-view-active-region-text)))
      (user-error "Buffer %S not alive." pdf-buf-name))))
#+END_SRC


**** calendar-insert-date

We need a function to insert a date by clicking on the date in the calendar and hiting RET.
Do we really have to exit the calendar after each selection?

#+BEGIN_SRC emacs-lisp
(defun calendar-insert-date ()
  "Capture the date at point, exit the Calendar, insert the date."
  (interactive)
  (seq-let (month day year) (save-match-data (calendar-cursor-to-date))
    (calendar-exit)
    (insert (format "%d-%02d-%02d" year month day))))
(define-key calendar-mode-map (kbd "RET") 'calendar-insert-date)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/Users/blaine/")
#+END_SRC


*** org-babel

Org-babel is key to supporting literate programming in org-mode documents.
This is where you activate and deactivate programming languages that can be run from source blocks in org documents.
For example, this document uses source blocks that have elisp code.

The jupyter language allows a second approach in that you can tap into a jupyter kernel for a specific language or a specific python environment.
Note that jupyter has to come last in the list.
Invoke jupyter as a language and then specify the kernel.
For examples, use ~#+BEGIN_SRC jupyter :session jl :kernel julia-1.8.2 :output both~.
You have to specify a session.
You can include only emacs-lisp and jupyter as the languages.

My selected languages are listed below.
The accepted language names are listed [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][here]].
Note that shell includes bash.
The
The languages with ~t~ are acitvated.
The languages with ~nil~ are inactivated.

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (c . nil)
   (cpp . nil)
   (clojure . t)
   (F90 . nil)
   (gnuplot . t)
   (js . nil)
   (ditaa . nil)
   (java . t)
   (mathematica . nil)
   (plantuml . nil)
   (lisp . t)
   (org . t)
   (smiles . t)
   (julia . t)
   (python . t)
   (R . t)
   (jupyter . t)))
#+END_SRC




#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "/Users/blaine/.emacs.default/elisp/org-mode/lisp")
(add-to-list 'load-path "/Users/blaine/.emacs.default/elisp/emacs-jupyter")
#+END_SRC
#+END_COMMENT


#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
:after (ob-jupyter ob-python)
:config
(setq jupyter-api-authentication-method 'password)
(setq jupyter-eval-use-overlays nil)
(setq org-babel-default-header-args:jupyter-python '((:session . "/jpy:localhost#8888:py")
                                                     (:kernel . "conda-env-edge-py")
                                                     (:async . "yes")
                               (:pandoc t)))
(add-to-list 'savehist-additional-variables 'jupyter-server-kernel-names)
(setq ob-async-no-async-languages-alist '("jupyter-python"))
(add-to-list 'org-structure-template-alist '("j" . "src jupyter-python")))
#+END_SRC
#+END_COMMENT

#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
(use-package jupyter
  :ensure t)
#+END_SRC
#+END_COMMENT


I add to add ~:results value scalar~ to get the appropriate output.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-babel-default-header-args:emacs-lisp
             '(:results . "output"))
#+END_SRC

#+BEGIN_COMMENT
*** Turn off security confirmation for langs in list.

#+BEGIN_SRC emacs-lisp
;; source: https://emacs.stackexchange.com/questions/21124/execute-org-mode-source-blocks-without-security-confirmation
(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("C" "clojure" "sh" "jupyter-python" "jupyter-julia"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC


*** consult-org-headings
Eric Fraga's wrapper for the consult-org-heading function.
Gives plain text headers listed in minibuffer.

#+BEGIN_SRC emacs-lisp
(defun esf/consult-org-heading ()
  "Eric's wrapper about consult-org-heading."
  (interactive)
  (let ((org-level-faces nil))
    (consult-org-heading)))
(global-set-key (kbd "C-c s") 'esf/consult-org-heading)
#+END_SRC

I like the default settings with color coding.
I have mapped these to the ~C-c s~.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c s") 'consult-org-heading)
;;(add-hook 'org-mode-hook
;;          (lambda ()
;;                  (local-set-key (kbd "C-c s") 'consult-org-heading)))
#+END_SRC
#+END_COMMENT

*** org-drill for spaced repetition learning in org-mode

You have to install org-drill from MELPA.

This is a YouTube video about how to use org-drill[[https://www.youtube.com/watch?v=uraPXeLfWcM][to learn Chinese]].
You can use org tables to generate [[https://github.com/chrisbarrett/org-drill-table][flashcards]].

#+BEGIN_SRC emacs-lisp
(use-package org-drill
             :config (progn
                          (add-to-list 'org-modules 'org-drill)
                          (setq org-drill-add-random-noise-to-intervals-p t)
                          (setq org-drill-hint-separator "||")
                          (setq org-drill-left-cloze-delimiter "<[")
                          (setq org-drill-right-cloze-delimiter "]>")
                          (setq org-drill-learn-fraction 0.25)
             )
)
#+END_SRC



*** org-download

To drag and drop images into org files, see the associate [[https://github.com/abo-abo/org-download][GitHub page]].

#+BEGIN_SRC emacs-lisp
(use-package org-download)
;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC

#+BEGIN_COMMENT
*** org gantt plots

There is a number of ways to make these type of plots in Emacs.
The ~elgantt.el~ project is promising due to its integration with org.
The [[plantuml-mode][https://github.com/skuro/plantuml-mode]] can also be used to make a GANTT plot with the plantuml code in a code block and the output below.

The simplist and most robust is the generate a table in an org document of the events, days of effort, their start date, and their end date.
The latter two columns were columns three and four of the table that I used with the script below.
Then use a gnuplot script to call this table and write out a plot.

I obtained the inspiration for this plot from [[https://www.youtube.com/watch?v=5ViUBaarsbw][GANTT chart in Emacs]] on YouTube.
I needed only the first four columns to generate the GANTT plot.
The remaining columns were left for later work.

Enter ~TAB, RET~ or ~C-c C-c~ to auto-adjust the Table as you enter values and to complete the dates.
The numerical value of the date can be entered and the day of the week will be determined automatically after entering ~C-c C-c~.
The date needs to be added in the YYYY-MM-DD format.
Single-digit dates must be preceded by a 0.

Enter ~S-M-down~ to add a row above.
Enter ~M-up~ to move a row up.

The column formula calculates the end date.
I included shorten version of the table with the minimum configuration as a template.
I deleted a number of rows of sensitive information under the manuscript and grant proposal preparation categories.


#+tblname: gantt-table
| Task                                  | Effort in Days | Start date       | End date         | Responsible | Spent | Progress | Projected Effort | Over/Under time |
|---------------------------------------+----------------+------------------+------------------+-------------+-------+----------+------------------+-----------------|
| Service:                              |                |                  |                  |             |       |          |                  |                 |
| MRAB study section                    |             30 | <2022-06-01 Wed> | <2022-06-28 Tue> |             |       |          |                  |                 |
| MRAB study section                    |             30 | <2022-10-01 Sat> | [2022-10-31 Mon] |             |       |          |                  |                 |
| MRAB study section                    |             30 | <2023-02-10 Thu> | <2023-03-08 Tue> |             |       |          |                  |                 |
| Meetings:                             |                |                  |                  |             |       |          |                  |                 |
| SciPy22 Mtg                           |              6 | <2022-07-11 Mon> | [2022-07-18 Sun] |             |       |          |                  |                 |
| ACA abstract                          |             15 | <2022-04-03 Sun> | <2022-04-15 Fri> |             |       |          |                  |                 |
| ACA Mtg                               |              5 | <2022-07-29 Fri> | <2022-08-02 Tue> |             |       |          |                  |                 |
| GRC abstract                          |             15 | <2022-06-01 Wed> | <2022-06-15 Wed> |             |       |          |                  |                 |
| GRC Mtg                               |              7 | <2022-07-24 Sun> | <2022-07-29 Fri> |             |       |          |                  |                 |
| SSRL/LCLS Mtg                         |              6 | <2022-09-26 Mon> | <2022-09-30 Fri> |             |       |          |                  |                 |
| JuptyerCon 2023 abstract              |             14 | <2022-07-01 Sun> | <2022-07-14 Thu> |             |       |          |                  |                 |
| JupyterCon 2023                       |              5 | <2022-10-10 Mon> | <2022-10-14 Fri> |             |       |          |                  |                 |
| EmacsConf22 abstract                  |             15 | <2022-09-01 Thu> | <2022-09-15 Mon> |             |       |          |                  |                 |
| EmacsConf22                           |              2 | <2022-11-26 Sat> | <2022-11-27 Sun> |             |       |          |                  |                 |
| Grant reports:                        |                |                  |                  |             |       |          |                  |                 |
| NIH/NCI R01 grant                     |              2 | <2022-03-21 Mon> | <2022-04-15 Fri> |             |       |          |                  |                 |
| NIH/NGMS COBRE phase 2                |              5 | <2022-06-01 Wed> | <2022-07-31 Sun> |             |       |          |                  |                 |
| PHF Year 2                            |              5 | <2022-07-01 Fri> | <2022-07-31 Sun> |             |       |          |                  |                 |
| OCAST Year 2                          |              2 | <2022-07-25 Mon> | <2022-07-29 Fri> |             |       |          |                  |                 |
| COBRE ECA mid-yr                      |              5 | <2022-05-21 Sat> | <2022-05-31 Tue> |             |       |          |                  |                 |
| COBRE ECA CY2022                      |              5 | <2022-12-06 Tue> | <2022-12-10 Sat> |             |       |          |                  |                 |
|---------------------------------------+----------------+------------------+------------------+-------------+-------+----------+------------------+-----------------|
#+TBLFM: $4=if("$-1"!="",date(<$-1>)+<$-2>,string(""));E

The source of the Gnuplot code below is from the comments section of [[https://www.youtube.com/watch?v=5ViUBaarsbw][GANTT chart in Emacs]] on YouTube.
I modifed the code to accommodate a GANTT plot with 60 events and to write it out to a PDF.
This plot takes up a full page (7 by 9 inches).
I switched to using PNG for this demo because PDFs can be hard to display in some browsers.

Enter ~C-c C-c~ in the code block to run it.
Change the line width of the arrow sytle line to change the thickness of the bars.

March 2022 appears on the x-axis.
I have not figured out how to start from April.
Maybe the x-range has to be set.

#+BEGIN_SRC gnuplot :var DATA=gantt-table :file gantt-short.png
OneMonth = strptime("%m","2")
timeformat = "%Y-%m-%d"
T(N) = timecolumn(N,timeformat)

set term png size 700,900 enhanced font "Helvetica"
#set term pdfcairo size 7in,9in
set xtics font ",10"
set ytics font ",10"
set xdata time
set format x "%b\n'%y"
set xtics OneMonth nomirror
set xtics scale 2, 0.5
set mxtics 4


skiptorow=3
set yrange [(skiptorow-2):] reverse
set ytics nomirror

unset key
set title "{/=10 GANTT Chart of Mooers Lab: April 2022 - March 2023\n {/=8 (minus teaching duties)}}"
set grid x y
set border 3
set style arrow 1 nohead filled size screen 0.02, 15 fixed lt 3 lw 12

plot DATA using (T(3)) : ($0) : (T(4)-T(3)) : (0.0) : yticlabel(1) with vector as 1
#+END_SRC

[[gantt-short.png][Click here to see the resulting Gantt plot]]

SVG files are opened by Inkscape.
PS files are not writing output.
PNG files work ok.
PDF works well, but it is opened by the system default PDF viewer.
Close the prior version of the file to allow the new version to open.
PNG files, once loaded, will update automatically.

The source of this code is from the comments section of [[https://www.youtube.com/watch?v=5ViUBaarsbw][GANTT chart in Emacs]] on YouTube.
Enter ~C-c C-c~ in the code block to run it.
Change the line width of the arrow style line to change the thickness of the bars.

March 2022 appears on the x-axis.
I have not figured out how to start from April.
Maybe the x-range has to be set.

This file can be added to the list of files in the init.el file that are opened on start-up of org.
This may be a practice to facilitate the updating and tuning of the plot and to keep remind you to look at it from time-to-time.
I tend to make annual plans and then forget about them until annual-review time a year later.

This plot took several hours to figure out.
I probably spent another 5-6 hours making and adjusting the entries.
Maybe Monday.com or asana would be better for team planning on a shorter time horizon, but this is plot works for annual planning and is under my local control.

I tried to deploy the column formula shown on the video, but I had a typo that held me back for a long time.
I had to add the set term, set xtics, and set ytics to expand the size of the plot and to adjust the size of the labels to accommodate 55 entries.
#+END_COMMENT


#+BEGIN_COMMENT
**** elgantt


#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/Users/blaine/.emacs.default/elisp/elgantt") ;; Or wherever it is located
(require 'elgantt)
(setq elgantt-agenda-files "/Users/blaine/.emacs.default/elisp/elgantt/test.org")

(setq elgantt-user-set-color-priority-counter 0)
(elgantt-create-display-rule draw-scheduled-to-deadline
  :parser ((elgantt-color . ((when-let ((colors (org-entry-get (point) "ELGANTT-COLOR")))
                               (s-split " " colors)))))
  :args (elgantt-scheduled elgantt-color elgantt-org-id)
  :body ((when elgantt-scheduled
           (let ((point1 (point))
                 (point2 (save-excursion
                           (elgantt--goto-date elgantt-scheduled)
                           (point)))
                 (color1 (or (car elgantt-color)
                             "black"))
                 (color2 (or (cadr elgantt-color)
                             "red")))
             (when (/= point1 point2)
               (elgantt--draw-gradient
                color1
                color2
                (if (< point1 point2) point1 point2) ;; Since cells are not necessarily linked in
                (if (< point1 point2) point2 point1) ;; chronological order, make sure they are sorted
                nil
                `(priority ,(setq elgantt-user-set-color-priority-counter
                                  (1- elgantt-user-set-color-priority-counter))
                           ;; Decrease the priority so that earlier entries take
                           ;; precedence over later ones (note: it doesn’t matter if the number is negative)
                           :elgantt-user-overlay ,elgantt-org-id)))))))
(setq elgantt-header-type 'outline
      elgantt-insert-blank-line-between-top-level-header t
      elgantt-startup-folded nil
      elgantt-show-header-depth t
      elgantt-draw-overarching-headers t)

(setq elgantt-header-type 'hashtag
      elgantt-insert-blank-line-between-top-level-header nil
      elgantt-startup-folded t)
#+END_SRC
#+END_COMMENT

#+BEGIN_COMMENT
*** org-latex minted

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-latex-minted-options
     '(("frame" "lines") ("linenos=false") ("framerule=2pt") ("breaklines")))
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-src-fontify-natively t)
#+END_SRC
#+END_COMMENT

#+BEGIN_COMMENT
*** org-latex-classes by document class

From [[https://github.com/WouterSpekkink/dotfiles/edit/master/doom/config.el][github]].
For the per-file class, you need to have ox-latex loaded and then evaluate the code block with ~C-c C-c~.
Check the value of org-export-latex-classes using ~C-h v~ to make sure it's "taken".

I am stumped on the configuration.
Did ox-latex get renamed to org-latex?
No, it is a built in file https://github.com/yyr/org-mode/blob/master/lisp/ox-latex.el.

To use this setup in your org file, reference the name you gave it (e.g., ~#+LATEX_CLASS: Springer~).


[[https://tex.stackexchange.com/questions/364914/using-koma-script-article-with-org-mode][Source]]
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("koma-article" "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("apa6" "\\documentclass{apa6}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("report" "\\documentclass{report}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  (add-to-list 'org-latex-classes
               '("memoir" "\\documentclass{memoir}"
                 ("\\book{%s}" . "\\book*{%s}")
                 ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s} .\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("paper" "\\documentclass{paper}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
            '("Springer"
               "\\documentclass[natbib]{svjour3}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
# #+END_SRC
#+END_COMMENT


# *** org-export-latex-no-toc
#
# #+BEGIN_SRC emacs-lisp
# (defun org-export-latex-no-toc (depth)
#   (when depth
#     (format "%% Org-mode is exporting headings to %s levels.\n"
#               depth)))
# #+END_SRC
#
#
#
#
# *** org-gcal
#
# [[https://github.com/myuhe/org-gcal.el][See org-gcal]]'s GitHub repo.
# There are 13 steps required to set this up.
# It will take several hours.
#
#
#
# *** org-gtd
#
# This project is relatively new. See the [[https://github.com/Trevoke/org-gtd.el/blob/master/doc/org-gtd.org][documentation]] on the reop.
# Requires org-edna.
#
# #+BEGIN_SRC emacs-lisp
# (use-package org-gtd :after 'org)
# #+END_SRC
#
#
#
# *** org-mind-map
#
# This Emacs package creates graphs from the headings of an org file.
# The package depends on Grpahviz being installed.
# On the Mac, you can install graphviz with macports or home brew.
#
# The graphs can be directed.
# They can also have a radial layout.
# You control the layout of the graph with the settings below.
#
# This package looks like a very useful way to prepare small graphs to illustrate manuscripts and books by just using org to layout the graph.
# This spares you of the several hours required to relearn the dot language.
#
# To brainstorm a very large project, the IthoughtsX software may be more useful because you interact with the nodes in a GUI.
# They are easy to drag around and shift to different levels of the hierarchy.
#
# However, org can be used to quickly layout a graph by copying and pasting subtrees of nodes.
# The nodes are easy shuffle around by using the Meta and up and down arrow keys.
# The level of the node can be shifted with the Meta and right and left arrow keys.
#
# During the outline of a book, the org file can be used to initiate the outline.
# The outline could be imported into iThoughtsX and then filled out in one or multiple sessions of brainstorming.
#
# After the mindmap has matured, it can be exported to a markdown file.
# The markdown file can be converted to a LaTeX file via pandoc.
# Then outline can be used directly, although I like to parse the chapters into individual documents.
#
# Alternatively, the markdown file can be converted into an org file by using pandoc: ~pandoc --from=markdown --to=org -o testOutline.org xtallizationPlan.md~.
# Each node will acquire a properties drawer with a unique identifier.
# This exported org file needs a title line added.
# Otherwise, it is competent for exporting mindmap files via graphviz.
#
# The text that is added below a headline will appear in a box below the node.
# You can also include links to images.
# The links have to be indented to the same degree as the headline.
#
# Can an org file be imported into iThoughtsX?
# You can export an org file to markdown and then import the markdown into iThoughtsX.
# Perhaps a package for going from org to iThoughtsX is needed.
#
# I had to enable the markdown backend.
# Enter ~M-x customize-option~ and ~org-export-backends~.
# Check the markdown box.
# Then enter ~M-x org-md-export-to-markdown~, but you can get the markdown option after running ~C-c C-e~.
#
# A simple org file without much customization can be easily converted into a markdown file by manual editing.
# Delete the title line and do a search-and-replace to swamp the asterisks for pound signs.
# Then save the file with a ~md~ file extension.
# This file can be imported into ithoughtsX and then saved as a ~itmz~ file.
#
#
# #+BEGIN_SRC emacs-lisp
# (use-package org-mind-map
#   :init
#   (require 'ox-org)
#   :ensure t
#   ;; Uncomment the below if 'ensure-system-packages` is installed
#   ;;:ensure-system-package (gvgen . graphviz)
#   :config
#   (setq org-mind-map-engine "dot")       ; Default. Directed Graph
#   ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
#   ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
#   ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
#   ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
#   ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
#   ;; (setq org-mind-map-engine "circo")  ; Circular Layout
#   )
# #+END_SRC
#
# Then, run ~M-x org-mind-map-write~ within the org-mode file you would like to make a mind-map for.
# If the program works as expected, a PDF file will be generated in the same directory as the org file.
# You will be prompted for the file type for the exported graph, so you are not limited to PDFs.
# Other file types include png, jpeg, svg, eps, gif, and tiff.
# You can use tags for the nodes, and you can import images.
# See the [[https://github.com/the-ted/org-mind-map][GitHub page]] for this project for more information and examples.
#
# Note that the GitHub repo mentions a size limit of 100 x 100 pixels for the embedded images.
# I found that the images do not have to be square.
# Also note that the exape images is about 300 by 300 so this size limit is no longer present.
#
# **** Cautions with setting up the hierarchy of the outline to be mapped
# - It takes several seconds for the  ~M-x org-mind-map-write~ command to complete so wait for the message "Org mind map finished." to appear in the minibuffer.
# - The mother node should be the only one at the top heading level with a single asterisk.
# - The title of the org file will be used in the stem of the export image filename.
# - Child nodes of the same name under different parent nodes will be shared between parents with multiple sets of arrows. Solve this problem by renaming the child nodes to different names or by using unique tags.
# - Tags have no spaces or dashes. The tags are text between two colons.
# - Graphs with more than twenty nodes in a level will not fit on a page of the US letter size.
# - Large graphs need to be exported to vector graphics files to avoid pixelation.
# - You can overwrite prior graph files without being warned that you are about to do so.
# - You may be limited to three or four levels of nodes on an 8.5-inch wide page.
# - Links have to be indented to the same degree as the headline above it.
# - Text entered above or below a link to an image will always appear above the image. This text area can be used as a caption.
# - The org Caption keyword does not work as expected.
#
#
# *** org-notebook
#
# This is an intriguing project designed to ease note-taking in class.
# I do not have much use for this functionality but there as several clever features with regards to setting up an org-centered project.
# The package is not maintained nor is it well [[https://github.com/Rahi374/org-notebook][documented]], so you need to read the elisp code.
#
#
# *** org-pdftools and org-noter-pdftools integration
#
# This YouTube [[https://www.youtube.com/watch?v=lCc3UoQku-E][video]] by Alexander Fu demonstrates the integration of these two packages.
# Note that the video is not narrated, so be patient with it.
#
# You can generate a skeleton of an opened PDF in the current buffer by entering org-noter-skeleton-create.
# You can use the skeleton as an outline in an org document that has been opened in a parallel buffer.
# This facilitates taking notes in a separate document.
# After reading the article and taking the notes, I recommend writing a summary for the annote section of the corresponding BibTeX record for the article.
#
# You have to install pdf-tools first.
# Then you have to run ~M-x pdf-tools-install~.
# Then install org-pdftools and org-noter-pdftools.
#
# To link a specific page of a .pdf-file in an org-file, use the following syntax:  ~[[pdf:~/file.pdf::3][Link to page 3]]~.
#
# When browsing a pdftools-buffer, use org-store-link (by default ~C-c l~) to get a link to this location within the PDF.
# Then use org-insert-link (by default C-c C-l) to create a link to this page and this place on the page.
#
# This is the recommended configuration from this GitHub [[https://github.com/fuxialexander/org-pdftools][site]] for this project.
#
# I failed to get the outline generation to work in two hours of effort.
# I may have used the wrong PDFs.
# A PDF may have to have an outline stored in its Metadata.
#
# Anyways, see pdftools for an improved experience for navigating PDFs in Emacs with pdftools.
#
# *** org-noter
#
# #. #+BEGIN_SRC emacs-lisp
# #. (use-package org-noter
# #.   :after org
# #.   :ensure t
# #.   :config
# #.   ;; Your org-noter config ........
# #.   :config
# #.   (setq
# #.     org_notes (concat (getenv "HOME") "/org-roam/")
# #.     zot_bib (concat (getenv "HOME") "/Documents/global.bib")
# #.     org-directory org_notes
# #.     deft-directory org_notes
# #.     org-roam-directory org_notes
# #.     ;; keep an empty line between headings and content in Org file
# #.     org-noter-separate-notes-from-heading t))
# #.
# #. ;;(use-package org-noter-pdf-tools)
# #. #+END_SRC
#
#
# #. **** Org-noter keybindings and commands @@html:<a name="keys">@@
# #. :PROPERTIES:
# #. :CUSTOM_ID: keys
# #. :END:
# #. | Key                                | Description                | Where?                    |
# #. | @@html:<kbd>@@i@@html:</kbd>@@     | Insert note                | Document buffer           |
# #. | @@html:<kbd>@@M-i@@html:</kbd>@@   | Insert precise note        | Document buffer           |
# #. | @@html:<kbd>@@q@@html:</kbd>@@     | Kill session               | Document buffer           |
# #. | @@html:<kbd>@@M-p@@html:</kbd>@@   | Sync previous page/chapter | Document and notes buffer |
# #. | @@html:<kbd>@@M-.@@html:</kbd>@@   | Sync current page/chapter  | Document and notes buffer |
# #. | @@html:<kbd>@@M-n@@html:</kbd>@@   | Sync next page/chapter     | Document and notes buffer |
# #. | @@html:<kbd>@@C-M-p@@html:</kbd>@@ | Sync previous notes        | Document and notes buffer |
# #. | @@html:<kbd>@@C-M-.@@html:</kbd>@@ | Sync selected notes        | Document and notes buffer |
# #. | @@html:<kbd>@@C-M-n@@html:</kbd>@@ | Sync next notes            | Document and notes buffer |
# #.
# #. You can use the usual keybindings to navigate the document
# #. (@@html:<kbd>@@n@@html:</kbd>@@, @@html:<kbd>@@p@@html:</kbd>@@,
# #. @@html:<kbd>@@SPC@@html:</kbd>@@, ...).
#
#
#
#
#
# *** helm-bibtex
#
# #. Source: https://github.com/tmalsburg/helm-bibtex
# #.
# #. JabRef can push the citekey of an entry into a LaTeX document as a cite key at the current position of the point.
# #.
# #.
# #. - Map the EDITOR to your Emacs binary
# #. - In JabRef's preferences, select Emacs as the external editor.
# #. - Restart JabRef
# #. - Select a citekey to push to Emacs.
# #. - Enter command-L. The citekey will show-up in LaTeX document enclosed in \verb|\cite{}|.
# #.
# #.
# #. The additional BibTeX fields that I want to use are as follows:
# #.
# #. - abstract
# #. - annote
# #. - url = {file:///Users/blaine/0papersLabeled} Should I be using the file filed instead??
# #. - doi
# #. - File =
# #.
# #.
# #.
# #. #+BEGIN_SRC emacs-lisp
# #. (use-package helm-bibtex
# #.   :config
# #.   (setq bibtex-completion-notes-path "/Users/blaine/org-roam"
# #.         bibtex-completion-bibliography "/Users/blaine/Documents/global.bib"
# #.         bibtex-completion-library-path '("/Users/blaine/0booksLabeled/" "/Users/blaine/0papersLabeled/")
# #.         bibtex-completion-pdf-field "File"
# #.         bibtex-completion-additional-search-fields '(keywords))
# #.         bibtex-completion-notes-template-multiple-files
# #.   (concat
# #.    "#+TITLE: ${title}\n"
# #.    "#+ROAM_KEY: cite:${=key=}\n"
# #.    "* TODO Notes\n"
# #.    ":PROPERTIES:\n"
# #.    ":Custom_ID: ${=key=}\n"
# #.    ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
# #.    ":AUTHOR: ${author-abbrev}\n"
# #.    ":JOURNAL: ${journaltitle}\n"
# #.    ":DATE: ${date}\n"
# #.    ":YEAR: ${year}\n"
# #.    ":DOI: ${doi}\n"
# #.    ":URL: ${url}\n"
# #.    ":END:\n\n"
# #.    )
# #.   :bind (:map org-mode-map ("C-c n B" . helm-bibtex))
# #. )
# #. #+END_SRC
#
#
# If the file filed is used in the bibtex entry, use it.
# The colon is the path to the pdf library.
# The semicolon separates multiple files.
#
# \begin{verbatim}
# File = {/path/to/article.pdf}
# File = {:/path/to/article.pdf:PDF}
# File = {:/path/to/article.pdf:PDF;:/path/to/supplementary_materials.pdf:PDF}
# \end{verbatim}
#
#
#
#
#
#
#
# # #+BEGIN_SRC emacs-lisp
# # (setq bibtex-completion-pdf-field "File")
# # #+END_SRC
# #
# # If the file field is not used but instead the naming scheme bibtex-key + .pdf,
# # search for the file.
# #
# # #+BEGIN_SRC emacs-lisp
# # (setq bibtex-completion-find-additional-pdfs t)
# # #+END_SRC
# #
# #
# # **** Optional fields
# #
# # #+BEGIN_SRC emacs-lisp
# # ;; Spell checking (requires the ispell software)
# # (add-hook 'bibtex-mode-hook 'flyspell-mode)
# #
# # ;; Change fields and format
# # (setq bibtex-user-optional-fields
# #       '(("keywords" "Keywords to describe the entry" "")
# #         ("abstract" "The abstract of the article" "")
# #         ("url" "The url of the article" "")
# #         ("doi" "The DOI of the article" "")
# #         ("file" "Link to document file." ":"))
# #       bibtex-align-at-equal-sign t)
# # #+END_SRC
# #
# #
# # All files whose name start with the BibTeX key will then be associated with an entry.
# # Name your files accordingly. For example:
# #
# # - bibtex-key-annotated.pdf
# # - bibtex-key-supplemental.pdf
# # - bibtex-key-chapter1.pdf
# #
# # These additional files are only detected when triggering an action, such as “Open PDF file”.
# # When the whole bibliography is loaded, only the “main” PDF bibtex-key.pdf is detected.
# #
# # [[https://github.com/tmalsburg/helm-bibtex][Source]] on github.
# #
# # **** Set how to open PDFs linked to citation by mode
# #
# # #+BEGIN_SRC emacs-lisp
# # (setq bibtex-completion-format-citation-functions
# #   '((org-mode      . bibtex-completion-format-citation-org-link-to-PDF)
# #     (latex-mode    . bibtex-completion-format-citation-cite)
# #     (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
# #     (default       . bibtex-completion-format-citation-default)))
# # #+END_SRC
# #
# **** Reading list for org
#
# To use the title of the PDF file in the link used in a reading list in org-mode:
#
# #+BEGIN_SRC emacs-lisp
# (setq bibtex-completion-format-citation-functions
#   '((org-mode      . bibtex-completion-format-citation-org-title-link-to-PDF)
#     (latex-mode    . bibtex-completion-format-citation-cite)
#     (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
#     (default       . bibtex-completion-format-citation-default)))
# #+END_SRC
#
#
#
*** deft

This search engine can scan org-roam entries.

#+BEGIN_SRC emacs-lisp
(use-package deft
  :commands deft
  :init
  (setq deft-default-extension "org"
        ;; de-couples filename and note title:
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
        ;; disable auto-save
        deft-auto-save-interval -1.0
        ;; converts the filter string into a readable file-name using kebab-case:
        deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  :config
  (add-to-list 'deft-extensions "tex")
  )
#+END_SRC




*** org-noter-pdftools

This package integrates org-noter and pdftools.

The following configuration follows the example located in the ~README.org~ file for this [[https://github.com/fuxialexander/org-pdftools][project]].


#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :after org
  :ensure t
  :config
  ;; Your org-noter config ........
  :config
  (setq
    org_notes (concat (getenv "HOME") "/org-roam/")
    zot_bib (concat (getenv "HOME") "/Documents/global.bib")
    org-directory org_notes
    deft-directory org_notes
    org-roam-directory org_notes
    ;; keep an empty line between headings and content in Org file
    org-noter-separate-notes-from-heading t)
  (require 'org-noter-pdftools))

(use-package org-pdftools
  :hook (org-mode . org-pdftools-setup-link))

(use-package org-noter-pdftools
  :after org-noter
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freepointer-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_SRC


Let org know about pdftools.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'org '(require 'org-pdfview))

(add-to-list 'org-file-apps
             '("\\.pdf\\'" . (lambda (file link)
                                     (org-pdfview-open link))))
#+END_SRC

*** org-pomodoro

Place the point (cursor) on the task you are to work on and then enter ~C-c o
~ to start a 25-minute pomodoro.
The time remaining on the pomodoro appears to the right of the clock on the modeline.
To the right of this is the total time spent on the task and the name of the task.
A :LOGBOOK: property will appear in tasks.org below the task.
The logbook is closed by default.
Open the logbook by placing the cursor on it and entering TAB.
If that fails, enter ~M-x outline-show-entry RET~  or ~M-x ou-s-e~.

A ding occurs at the end of a pomodoro.
A second ding occurs at the end of a break.
You have to enter ~C-c o~ to start the next pomodoro.

The tickling timer sound is too erractic right now.
This needs to be optimized.
You might be better off using a stand-a-lone timer or timer app.
I turn down the volume on to about 10% of maximum, and I can still hear the ding at the end of the pomodoro.


There is a github gist of a org-pomodoro-plus.el file that has more configurations.

#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
    :ensure t
    :commands (org-pomodoro)
    :config
    (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))))

;; (use-package sound-wav)
;; (setq org-pomodoro-ticking-sound-p nil)
;; ; (setq org-pomodoro-ticking-sound-states '(:pomodoro :short-break :long-break))
;; (setq org-pomodoro-ticking-sound-states '(:pomodoro))
;; (setq org-pomodoro-ticking-frequency 1)
;; (setq org-pomodoro-audio-player "mplayer")
;; (setq org-pomodoro-finished-sound-args "-volume 0.9")
;; (setq org-pomodoro-long-break-sound-args "-volume 0.9")
;; (setq org-pomodoro-short-break-sound-args "-volume 0.9")
;; (setq org-pomodoro-ticking-sound-args "-volume 0.3")

(global-set-key (kbd "C-c o") 'org-pomodoro)
#+END_SRC


# **** org-ref
#
# #
# # #+BEGIN_SRC emacs-lisp
# # (require 'org-ref)
# # (require 'org-ref-helm)
# # (require 'bibtex)
# # (setq bibtex-completion-bibliography '("/Users/blaine/Documents/global.bib")
# #     bibtex-completion-library-path '("/Users/blaine/0papersLabeled/")
# #     bibtex-completion-notes-path "/Users/blaine/Documents/notes/"
# #     bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
# #     bibtex-completion-additional-search-fields '(keywords)
# #     bibtex-completion-display-formats
# #     '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
# #       (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
# #       (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
# #       (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
# #       (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
# #     bibtex-completion-pdf-open-function
# #     (lambda (fpath)
# #       (call-process "open" nil 0 nil fpath)))
# #
# # (use-package bibtex
# #   :config
# #     (setq
# #     bibtex-autokey-year-length 4
# #     bibtex-autokey-name-year-separator "-"
# #     bibtex-autokey-year-title-separator "-"
# #     bibtex-autokey-titleword-separator "-"
# #     bibtex-autokey-titlewords 2
# #     bibtex-autokey-titlewords-stretch 1
# #     bibtex-autokey-titleword-length 5
# #     org-ref-bibtex-hydra-key-binding (kbd "H-b"))
# #
# # (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
# #
# # (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
# # (define-key org-mode-map (kbd "H-c") org-ref-insert-cite-function)
# # (define-key org-mode-map (kbd "H-r") org-ref-insert-ref-function)
# # (define-key org-mode-map (kbd "H-l") org-ref-insert-label-function)
# # (define-key org-mode-map (kbd "H-d") 'doi-add-bibtex-entry)
# # #+END_SRC
# #
# # *** function for opening the PDF linked to the citation under the point
#
# [[http://www.wouterspekkink.org/academia/writing/tool/doom-emacs/2021/02/27/writing-academic-papers-with-org-mode.html][source]]
#
#
# # #+BEGIN_COMMENT
# # #+BEGIN_SRC emacs-lisp
# # (defun my/org-ref-open-pdf-at-point ()
# #   "Open the pdf for bibtex key under point if it exists."
# #   (interactive)
# #   (let* ((results (org-ref-get-bibtex-key-and-file))
# #          (key (car results))
# #          (pdf-file (funcall org-ref-get-pdf-filename-function key)))
# #     (if (file-exists-p pdf-file)
# #         (find-file pdf-file)
# #       (message "No PDF found for %s" key))))
# #
# #   (setq org-ref-completion-library 'org-ref-ivy-cite
# #         org-export-latex-format-toc-function 'org-export-latex-no-toc
# #         org-ref-get-pdf-filename-function
# #         (lambda (key) (car (bibtex-completion-find-pdf key)))
# #         ;; See the function I defined above.
# #         org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point
# #         ;; For pdf export engines.
# #         org-latex-pdf-process (list "latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -bibtex -f -output-directory=%o %f")
# #         ;; I use orb to link org-ref, helm-bibtex and org-noter together (see below for more on org-noter and orb).
# #         org-ref-notes-function 'orb-edit-notes)
# # #+END_SRC
# # #+END_COMMENT
#
#
# *** org-ref, newer config
#
# #   #+BEGIN_COMMENT
# # #+BEGIN_SRC emacs-lisp
# # (use-package org-ref
# #   :after org
# #   :config
# #   (defun blaine/reformat-bib-library (&optional filename)
# #     "Formats the bibliography using biber & rebiber and updates the PDF -metadata."
# #     (interactive "P")
# #     (or filename (setq filename blaine/main-bib-library))
# #     (let ((cmnd (concat
# #                  (format "rebiber -i %s &&" filename) ; Get converence versions of arXiv papers
# #                  (format "biber --tool --output_align --output_indent=2 --output_fieldcase=lower --configfile=~/bib-lib/biber-myconf.conf --output_file=%s %s && " filename filename) ; Properly format the bibliography
# #                 (format "sed -i -e 's/arxiv/arXiv/gI' -e 's/journaltitle/journal     /' -e 's/date      /year      /' %s &&" filename) ; Some replacements
# #                 (format "git commit -m \"Updating bibliography..\" %s && git push" filename) ; Commit and push the updated bib
# #                 )))
# #     (async-shell-command cmnd)))
# #
# # (defun blaine/reformat-bib-lib-hook ()
# #    "Reformat the main bib library whenever it is saved.."
# #    (when (equal (buffer-file-name) blaine/main-bib-library) (blaine/reformat-bib-library)))
# #     (add-hook 'after-save-hook 'blaine/reformat-bib-lib-hook)
# #     (setq bibtex-dialect 'bibtex))
# # #+END_SRC
# #   #+END_COMMENT

*** org-roam
#+Name: org-roam

The configuration for org-roam, the most advanced zettelkasten system for Emacs.
There are alternatives such as denote, Rollo in hyperbole, logi-sech(?), and others. 

This blog post compares dentoe and org-roam (https://whhone.com/posts/denote-vs-org-roam/). 
The author concluded that denote is for Elisp masters and org-roam is for the org-mode cult. 
He found org-roam to have more robust support for filtering and searching for zettels. 
This is not suprising because org-roam is more mature, although only several years old.

**** org-roam basic config

#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "/Users/blaine/org-roam/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  (org-roam-setup)
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+END_SRC



*** org-roam-bibtex

Min. config. from  https://gist.github.com/thriveth/f961e42dea4988f464ea67d2d6febbb1


#+BEGIN_SRC emacs-lisp
(use-package org-roam-bibtex
  :ensure t
  :config
  (setq orb-note-actions-interface 'hydra)
  (setq orb-preformat-keywords
	'("citekey" "title" "url" "author-or-editor" "keywords" "file")
	orb-process-file-keyword t
	orb-file-field-extensions '("pdf")
	)
  (org-roam-bibtex-mode)
  )

;; Org-ref: More better citation and reference handling.
;;(use-package org-ref
;;  :ensure t
;;  :config
;;  (setq bibtex-completion-bibliography "~/Documents/global.bib" )
;;  (setq bibtex-completion-library-path "~/0papersLabeled/")
;;  (setq biblio-download-directory "/home/user/0papersLabeled/")
;;  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
;;  (require 'org-ref)
;;  (require 'doi-utils)
;;  )
#+END_SRC




*** org-roam capture templates
This configuratin follows that of [[https://jethrokuan.github.io/org-roam-guide/][Jethro Kuan]] , 
excpet that I have embellished it with timestamps for date of creation and last modification.
I obtained this code from the following blog post by [[https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/][Peter Prevos]].
I have also added a line for tags, a section for backlinks, and a section for citations for the reference zettel.

Jethro is the lead developer of org-roam.
He divided his zettelkasten into three parts:

- main: these house original thoughts
- reference: these are contain atoms of knowledge gleaned from cited literature
- article: these seem to be "structure zettels" that contain an index or list of links to zettels of relevance to a article.

I had already started my zettelkasten.
I left the existing zettels outside of the three folders for the three kinds of zettels.

According to Luhman, the literature and article zettels were to be temporary.
However, retaining the article zettels may be useful to retain.
You could refer to them to help you avoid repeating yourself in the Introduction and Discussion sections of a series of articles.
The package zetteldesk is used to filter the zettels in a buffer for the purpose of article assembly.
My configuration for zetteldesk is [[#zetteldesk]].


#+BEGIN_SRC emacs-lisp
(setq org-roam-capture-templates
      '(("m" "main" plain
         "%?"
         :if-new (file+head "main/${slug}.org"
                            "#+title: ${title}\n#+date: %u\n#+lastmod: %t\n#+filetags: :permanent: \n\n\n\n\n ** Backlinks\n\n")
         :immediate-finish t
         :unnarrowed t)
        ("r" "reference" plain "%?"
         :if-new
         (file+head "reference/${title}.org" "#+title: ${title}\n#+date: %u\n#+lastmod: %t\n#+filetags: :reference: \n\n** Backlinks\n\n\n ** Citations ")
         :immediate-finish t
         :unnarrowed t)
        ("a" "article" plain "%?"
         :if-new
         (file+head "articles/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
         :immediate-finish t
         :unnarrowed t))
         time-stamp-start "#\\+lastmod: [\t]*")
#+END_SRC

It’d of course also be useful to differentiate the different types of zettels at completion time. 
This used to be a feature in Org-roam v1, which I’d removed. 
Thankfully, the code is architectured such that you could define your own properties on nodes. 
In this case, I want to define the “type” of note based on its file path. This is simple enough:


#+BEGIN_SRC emacs-lisp
(cl-defmethod org-roam-node-type ((node org-roam-node))
  "Return the TYPE of NODE."
  (condition-case nil
      (file-name-nondirectory
       (directory-file-name
        (file-name-directory
         (file-relative-name (org-roam-node-file node) org-roam-directory))))
    (error "")))
#+END_SRC


Modifying the display template to show the node “type”

#+BEGIN_SRC emacs-lisp
(setq org-roam-node-display-template
      (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
#+END_SRC


**** Reference zettels

- Call jethro/org-roam-node-from-cite.
- Select the correct reference.
- A new reference zettel is created.


#+BEGIN_SRC emacs-lisp
(defun jethro/org-roam-node-from-cite (keys-entries)
    (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
    (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                                "${author editor} :: ${title}")))
      (org-roam-capture- :templates
                         '(("r" "reference" plain "%?" :if-new
                            (file+head "reference/${citekey}.org"
                                       ":PROPERTIES:
:ROAM_REFS: [cite:@${citekey}]
:END:
#+title: ${title}\n")
                            :immediate-finish t
                            :unnarrowed t))
                         :info (list :citekey (car keys-entries))
                         :node (org-roam-node-create :title title)
                         :props '(:finalize find-file))))
#+END_SRC


**** Zettels are drafts until declared otherwise

#+BEGIN_SRC emacs-lisp
(defun jethro/tag-new-node-as-draft ()
  (org-roam-tag-add '("draft")))
(add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)
#+END_SRC


#+BEGIN_COMMENT
#+BEGIN_SOURCE
(add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)

(setq org-roam-node-display-template
    (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))


(defun jethro/org-roam-node-from-cite (keys-entries)
    (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
    (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                                "${author editor} :: ${title}")))
      (org-roam-capture- :templates
                         '(("r" "reference" plain "%?" :if-new
                            (file+head "reference/${citekey}.org"
                                       ":PROPERTIES:
:ROAM_REFS: [cite:@${citekey}]
:END:
#+title: ${title}\n")
                            :immediate-finish t
                            :unnarrowed t))
                         :info (list :citekey (car keys-entries))
                         :node (org-roam-node-create :title title)
                         :props '(:finalize find-file))))

(defun jethro/tag-new-node-as-draft ()
  (org-roam-tag-add '("draft")))
(add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)
#+END_SRC
#+END_COMMENT

#+BEGIN_COMMENT
# # *** org-roam-bibtex (orb)
# #
# # This package provides an interface between helm and org-roam.
# # From [[https://lucidmanager.org/productivity/emacs-bibtex-mode/][Prevos]].
# #
# # #+BEGIN_SRC emacs-lisp
# # (use-package org-roam-bibtex
# #   :after (org-roam helm-bibtex)
# #   :bind (:map org-mode-map ("C-c n b" . orb-note-actions))
# #   :config
# #   (require 'org-ref))
# #   (org-roam-bibtex-mode)
# # #+END_SRC
# #
#
#
#
# #+BEGIN_SRC emacs-lisp
# (use-package org-roam-bibtex
#     :hook (org-roam-mode . org-roam-bibtex-mode))
#
#   (setq orb-preformat-keywords
#         '("citekey" "title" "url" "author-or-editor" "keywords" "file")
#         orb-process-file-keyword t
#         orb-file-field-extensions '("pdf"))
#
#   (setq orb-templates
#         '(("r" "ref" plain(function org-roam-capture--get-point)
#            ""
#            :file-name "${citekey}"
#            :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}
# - tags ::
# - keywords :: ${keywords}
#
# *Notes
# :PROPERTIES:
# :Custom_ID: ${citekey}
# :URL: ${url}
# :AUTHOR: ${author-or-editor}
# :NOTER_DOCUMENT: ${file}
# :NOTER_PAGE:
# :END:")))
# #+END_SRC
#+END_COMMENT

*** org-roam-ui

This package displays the zettelkasten as a graph in your default browser.
It only work with version 2 of org-roam.
If installed from MELPA, no configuration is required.
Start by entering ~M-x org-roam-ui-mode~.

[[https://github.com/org-roam/org-roam-ui][source]]

#+BEGIN_COMMENT
# **** Visualize with igraph and R
#
# [[https://lucidmanager.org/data-science/visualise-org-roam/][See this post]] on how to visualize parts of your zettelkasten in igraph.
#
#
# *** org-roam ripgrep
#
# Function for ripgrep org-roam files.
#
# #+BEGIN_SRC emacs-lisp
# (defun bms/org-roam-rg-search ()
#   "Search org-roam directory using consult-ripgrep. With live-preview."
#   (interactive)
#   (let ((consult-ripgrep-command "rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS"))
#     (consult-ripgrep org-roam-directory)))
# (global-set-key (kbd "C-c rr") 'bms/org-roam-rg-search)
# #+END_SRC
#
#
#
# # *** org-speed-keys
# # Cursor must be to the left of the first star in the headline.
# #
# #
# # #+BEGIN_SRC emacs-lisp
# # (setq org-use-speed-commands t)
# # #+END_SRC
#
#
#+END_COMMENT





*** Org-transclusion

The source is here: \url{https://github.com/nobiot/org-transclusion}.
The README includes links to tutorial videos on YouTube.

I installed the package with MELPA.

This is the only required configuration:

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "<f12>") #'org-transclusion-add)
(define-key global-map (kbd "C-c t") #'org-transclusion-mode)
#+END_SRC

#+BEGIN_COMMENT
*** org-show-headings

[[https://stackoverflow.com/questions/25161792/emacs-org-mode-how-can-i-fold-everything-but-the-current-headline][source]]


#+BEGIN_SRC emacs-lisp
(defun org-show-current-heading-tidily ()
  (interactive)  ;Inteactive
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-back-to-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (let ((current-prefix-arg '(4))) (call-interactively 'org-reveal))
    (org-show-entry)
    (show-children)))
(add-hook 'org-mode-hook (lambda () (local-set-key "\M-=" 'org-show-current-heading-tidily)))
#+END_SRC
#+END_COMMENT

# *** org, tables
#
# This is not a package.
# These are functions for tangling tables from org files.
# [[https://emacs.stackexchange.com/questions/53723/export-table-to-csv-file-without-prompt][Source]].
#
#
#
#  #+BEGIN_SRC emacs-lisp
# (defun org+-tangle-table-at-point ()
#   "Tangle Org table at point.
# The table is ignored if it is not preceeded by a line like:
# #+ATTR_TANGLE: DATAFILE
# or
# #+ATTR_TANGLE: (\"DATAFILE\" \"TYPE\")"
#   (interactive)
#   (unless (org-at-table-p)
#     (user-error "Not at Org table"))
#   (let* (type
#      (data (org-element-context))
#      (parent (org-element-property :parent data))
#      file)
#     (while parent
#       (setq data parent)
#       (setq parent (org-element-property :parent data)))
#     (when (and (setq prop (org-element-property :attr_tangle data))
#            (setq file (read prop)))
#       (cond
#        ((symbolp file)
#     (setq file (symbol-name file)))
#        ((stringp file)) ;; keep it that way
#        ((consp file)
#     (setq type (nth 1 file)
#           file (car file)))
#        (t
#     (user-error "Unexpected format of table to be tangled")))
#       (org-table-export file (or type org-table-export-default-format))
#       t)))
#
# (defun org+-tangle-tables (fun &optional arg target-file lang)
#   "Tangle Org tables in current buffer.
# For around advice with `org-babel-tangle' as FUN.
# See `org-babel-tangle' for the args ARG, TARGET-FILE and LANG.
#
# Currently, only one table per file is possible."
#   (cond
#    ((equal arg '(4)) ;; at point
#     (if (org-at-table-p)
#     (org+-tangle-table-at-point)
#       (funcall fun arg target-file lang)))
#    ((equal arg '(16))
#     (funcall fun arg target-file lang))
#    (t
#     (funcall fun arg target-file lang)
#     (let ((table-count 0))
#       (org-with-wide-buffer
#        (goto-char (point-min))
#        (while (re-search-forward "^[ \t\r]*|" nil t)
#      (goto-char (match-beginning 0))
#      (when (org+-tangle-table-at-point)
#        (cl-incf table-count))
#      (goto-char (org-table-end)))
#        )
#       (message "Tangled %d tables from %s." table-count (buffer-name))))))
#
# (advice-add 'org-babel-tangle :around #'org+-tangle-tables)
# #+END_SRC
#
# The tables have to be preceded by the appropriate header.
#
# Another approach is to store the file path and file format in a properites drawer for the enclosing section.
#
# #+BEGIN_COMMENT
# #+BEGIN_SRC emacs-lisp
# ;; :Properties:
# ;; :TABLE_EXPORT_FILE: observations2.csv
# ;; :TABLE_EXPORT_FORMAT: orgtbl-to-csv
# ;; :END:
# #+END_SRC
# #+END_COMMENT
#
#
# *** org-sidebasr
#
# Place cursor in table and enter "M-x org-table-export" to send to a csv file.
# [[https://github.com/alphapapa/org-sidebar][org-sidebar]]
#
# #+BEGIN_SRC emacs-lisp
# (use-package org-sidebar
#   :ensure t)
# #+END_SRC
#
# *** org-tree-to-indirect-buffer
#
# This function address the shortcoming of org-tree-to-indirect-buffer which is that there can only be one such indirect buffer per Org mode file.
# [[https://www.reddit.com/r/orgmode/comments/dbsngi/comment/f26qpzr/][Source]].
# Its purpose is to provide more than one indirect buffer when using org-tree-to-indirect-buffer() (via C-c C-x b).
# This latter function is built-in.
# Repeating C-c C-x b will drill down to the lowest headline level.
#
#
# #+BEGIN_SRC emacs-lisp
# (defun my-org-tree-to-indirect-buffer (&optional arg)
#   "Create indirect buffer and narrow it to current subtree.
# The buffer is named after the subtree heading, with the filename
# appended.  If a buffer by that name already exists, it is
# selected instead of creating a new buffer."
#   (interactive "P")
#   (let* ((new-buffer-p)
#          (pos (point))
#          (buffer-name (let* ((heading (org-get-heading t t))
#                              (level (org-outline-level))
#                              (face (intern (concat "outline-" (number-to-string level))))
#                              (heading-string (propertize (org-link-display-format heading)
#                                                          'face face)))
#                         (concat heading-string "::" (buffer-name))))
#          (new-buffer (or (get-buffer buffer-name)
#                          (prog1 (condition-case nil
#                                     (make-indirect-buffer (current-buffer) buffer-name 'clone)
#                                   (error (make-indirect-buffer (current-buffer) buffer-name)))
#                            (setq new-buffer-p t)))))
#     (switch-to-buffer new-buffer)
#     (when new-buffer-p
#       ;; I don't understand why setting the point again is necessary, but it is.
#       (goto-char pos)
#       (rename-buffer buffer-name)
#       (org-narrow-to-subtree))))
#
# (advice-add 'org-tree-to-indirect-buffer :override 'my-org-tree-to-indirect-buffer)
# (global-set-key (kbd "C-c i b") 'my-org-tree-to-indirect-buffer)
# #+END_SRC
#
# Note: a similar effect is had using a tag via (e.g., C-c \ m and enter tag at the prompt in the minibuffer).
#
#
# *** org-wc
# Enable org-wc to work in org documents.
# Enter `wc` to get word count returned in org files.
# Enter `C-c w` to the samething.
#
# Similar to wc-mode which works in all documents.
#
# #+BEGIN_SRC emacs-lisp
# (use-package org-wc
#   :ensure t)
# (define-key org-mode-map [("\C-cw")] 'org-wc-display)
# #+END_SRC
#
# See [[https://github.com/tesujimath/org-wc/blob/master/org-wc.el][github repo]].
#
#
#
# *** org-count-words
# [[https://www.reddit.com/r/emacs/comments/8qm1lb/new_orgcountwords_command/][org-count-words]]
#
#
# #+BEGIN_SRC emacs-lisp
# (defun ap/org-forward-to-entry-content (&optional unsafe)
#     "Skip headline, planning line, and all drawers in current entry.
# If UNSAFE is non-nil, assume point is on headline."
#     (unless unsafe
#       ;; To improve performance in loops (e.g. with `org-map-entries')
#       (org-back-to-heading))
#     (cl-loop for element = (org-element-at-point)
#              for pos = (pcase element
#                          (`(headline . ,_) (org-element-property :contents-begin element))
#                          (`(,(or 'planning 'property-drawer 'drawer) . ,_) (org-element-property :end element)))
#              while pos
#              do (goto-char pos)))
#
# (defun ap/org-count-words ()
#     "If region is active, count words in it; otherwise count words in current subtree."
#     (interactive)
#     (if (use-region-p)
#         (funcall-interactively #'count-words-region (region-beginning) (region-end))
#       (org-with-wide-buffer
#        (cl-loop for (lines words characters)
#                 in (org-map-entries
#                     (lambda ()
#                       (ap/org-forward-to-entry-content 'unsafe)
#                       (let ((end (org-entry-end-position)))
#                         (list (count-lines (point) end)
#                               (count-words (point) end)
#                               (- end (point)))))
#                     nil 'tree)
#                 sum lines into total-lines
#                 sum words into total-words
#                 sum characters into total-characters
#                 finally do (message "Subtree \"%s\" has %s lines, %s words, and %s characters."
#                                     (org-get-heading t t) total-lines total-words total-characters)))))
# #+END_SRC
#
#
# *** One sentence per line, ospl-mode
#
# Writing one sentence per line (OSPL) in LaTeX files eases resolving conflict resolution when using version control.
# The use of ospl also eases shuffling lines around in Emacs using ~M-up~ or ~M-down~.
# This package provides this as an Emacs minor mode, where M-q fills the current paragraph to OSPL.
# The source of this code is located [[https://github.com/stettberger/ospl-mode][here]].
#
# #+BEGIN_SRC emacs-lisp
# ;; (load-file "~/.emacs.default/manual-packages/ospl/ospl-mode.el")
# ;; (use-package ospl-mode
# ;;   :hook (TeX-mode . ospl-mode))
# ;; (define-key global-map "\C-cfc" 'filesets-close)
# #+END_SRC
#
#
#
#
# ** P
#
# *** paredit
#
#
# #+BEGIN_SRC emacs-lisp
# (use-package paredit
#   :ensure t)
# (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
# (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
# (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
# (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
# (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
# (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
# (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
# #+END_SRC
#
#
# *** pdb-tools
#
# Marcin Magnus's updated fork of pdb-tools by Charlie Bond and David Love.
# [[https://github.com/mmagnus/emacs-pdb-mode][Gitub repo]]]
#
# #+BEGIN_SRC emacs-lisp
# ;; pdb.el
# (load-file "~/.emacs.default/plugins/emacs-pdb-mode/pdb-mode.el")
# (setq pdb-rasmol-name "/Applications/PyMOL.app/Contents/bin/pymol")
# (setq auto-mode-alist
#      (cons (cons "pdb$" 'pdb-mode)
#            auto-mode-alist ) )
# (autoload 'pdb-mode "PDB")
# #+END_SRC
#
#
#+END_COMMENT

*** pdf-tools

This is an alternative to the built-in DocView package.


The pdf-tools package runs on top of pdf-view package.
This making capturing text from PDFs much easier.

I followed a [[http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools][blog post]].
You enter highlights by selecting with the mouse and entering C-c C-a h.
An annotation menu opens in the minibuffer.
Enter ~C-c C-c~ to save the annotation.
Enter ~C-c C-a t~ to enter text notes.
Enter the note and enter ~C-c C-c~ to save.
Right-click the mouse to get a menu of more options.


#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :pin manual ;; manually update
  :config
  ;; initialise
  (pdf-tools-install)

  ;; This means that pdfs are fitted to width by default when you open them
  (setq-default pdf-view-display-size 'fit-width)
  ;; open pdfs scaled to fit page
  ;;  (setq-default pdf-view-display-size 'fit-page)
   ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
  ;; Setting for sharper images with Macs with Retina displays
  (setq pdf-view-use-scaling t)
#+END_SRC


**** Useful keybindings for viewing PDFs
|------------------------------------------+-----------------|
| Display                                  |                 |
|------------------------------------------+-----------------|
| Zoom in / Zoom out                       | ~+~ / ~-~       |
| Fit height / Fit width / Fit page        | ~H~ / ~W~ / ~P~ |
| Trim margins (set slice to bounding box) | ~s b~           |
| Reset margins                            | ~s r~           |
| Reset z oom                              | ~0~             |
|------------------------------------------+-----------------|

**** Useful keybindings for navigating PDFs

|-----------------------------------------------+-----------------------|
| Navigation                                    |                       |
|-----------------------------------------------+-----------------------|
| Scroll Up / Down by Page-full                 | ~space~ / ~backspace~ |
| Scroll Up / Down by Line                      | ~C-n~ / ~C-p~         |
| Scroll Right / Left                           | ~C-f~ / ~C-b~         |
| First Page / Last Page                        | ~<~ / ~>~             |
| Next Page / Previous Page                     | ~n~ / ~p~             |
| First Page / Last Page                        | ~M-<~ / ~M->~         |
| Incremental Search Forward / Backward         | ~C-s~ / ~C-r~         |
| Occur (list all lines containing a phrase)    | ~M-s o~               |
| Jump to Occur Line                            | ~RETURN~              |
| Pick a Link and Jump                          | ~F~                   |
| Incremental Search in Links                   | ~f~                   |
| History Back / Forwards                       | ~l~ / ~r~             |
| Display Outline                               | ~o~                   |
| Jump to Section from Outline                  | ~RETURN~              |
| Jump to Page                                  | ~M-g g~               |
| Store position / Jump to position in register | ~m~ / ~'~             |
|-----------------------------------------------+-----------------------|


See org-noter section



*** poly-mode

#+BEGIN_SRC emacs-lisp
(use-package poly-markdown
  :ensure t)
#+END_SRC

*** poly-R

#+BEGIN_SRC emacs-lisp
(use-package poly-R
  :ensure t)
;; associate the new polymode to Rmd files:
(add-to-list 'auto-mode-alist
             '("\\.[rR]md\\'" . poly-gfm+r-mode))
;; uses braces around code block language strings:
(setq markdown-code-block-braces t)
#+END_SRC

#+BEGIN_COMMENT
*** projectile
[[https://docs.projectile.mx][Documentation:]]
A eight-minute introduction by Lukewh on YouTube to projectile is found [[https://www.youtube.com/channel/UC7FpGodjczWY8mDV1KvP2pQ][here]].
A more in-depth introdction is provided by Dave Wilson of System Crafters fame starting at 1:40 [[https://www.youtube.com/watch?v=INTu30BHZGk][here]].
#
# Projectile is used to manage projects and for common functionality like project-wide searching, fuzzy file finding, etc.
#
#
# **** Features of projectile
#
# Projectile supports the following
#
# - finding a file in project
# - switching projects quickly
# - jump to a project buffer
# - jump to a test in project
# - jump to recently visited files in the project
# - kill (close) all project buffers
# - replace in project
# - grep (search) in project
# - run shell commands in a project (e.g. ~make~, ~lein~)
# - support for multiple minibuffer completion/selection libraries (~ido~, ~ivy~, ~helm~ and the default completion system)
#
#
# **** projects
#
# Projectile will use most existing version control systems like .git for the list of files in a project.
# Projectile will also use most project types for various programming languages; this includes Ruby projects with Gemfiles, Maven Java projects with pom.xml files, Clojure CLI  projects with deps.edn files, Leiningen projects with project.clj, make with Makefile, cmake with CMakeLists.txt, pip with requirements.txt, setuptools project with setup.py.
# For folders not under version control or not a project, add the empty file .projectile with the command `touch .projectile` to make the folder into a project.
# This folder will appear in the dashboard upon restart of Emacs.
#
# **** modes of operation
#
# Projectile has three modes of operation:
#
# - native: implemented in Emacs Lisp and known as the native indexing method
# - hybrid
# - alien (e.g., git, Maven, lein)
#
#
# **** Dependencies
#
# Projectile uses ag, fd, or rg (ripgrep) for searches.
#
#
# **** Some basic Commands
#
# |-----------------------------------------------------------------------+------------|
# | Description                                                           | keybinding |
# |-----------------------------------------------------------------------+------------|
# | Find file in current project                                          | s-p f      |
# | Switch project                                                        | s-p p      |
# | Switch between open projects with                                     | s-p q      |
# | Grep (search for text/regexp) in project                              | s-p s g    |
# | Replace in project                                                    | s-p r      |
# | Invoke any Projectile command via the Projectile Commander            | s-p m      |
# | Toggle between implementation and test                                | s-p t      |
# | Toggle between related files                                          | s-p a      |
# | Run a shell command in the root of the project                        | s-p !      |
# | For a sync command and for an async command                           | s-p &      |
# | Build/compile project                                                 | s-p c      |
# | Test project                                                          | s-p T      |
# |-----------------------------------------------------------------------+------------|
#
#
# #+BEGIN_SRC emacs-lisp
# (use-package projectile
#   :init
#   (projectile-mode t) ;; Enable this immediately
#   :config
#   (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map) ; recommended for Mac OS
#   (setq projectile-enable-caching t ; Much better performance on large projects
#         projectile-completion-system 'ido)) ; Ideally the minibuffer should aways look similar. Three options are helm, ido, and ivy. I like ido.
# #+END_SRC
#
#
#
# ***** Turn on projectile on restart up of Emacs.
#
# #+BEGIN_SRC emacs-lisp
# (projectile-mode +1)
# #+END_SRC
#
# ***** Sort files by recently opened.
#
# #+BEGIN_SRC emacs-lisp
# (setq projectile-sort-order 'recentf)
# #+END_SRC
#
# **** counsel-projectile
#
# #+BEGIN_SRC emacs-lisp
# (use-package counsel-projectile
#   :config (counsel-projectile-mode))
# #+END_SRC
#
#
# *** pubmed
#
# This package is very useful for most biomedical scientists who relie on PubMed.
# It allows you to submit searches from inside Emacs to Pubmed.
# The result is returned in a new buffer as a list of refernces.
# You mark the ones of interest.
# The bibtex for the marked ones can be fetched (appears to be broken).
# The work around is to past the title into the Google Scholar Bibtex extension for Chrome.
# The returned Bibtex can be pasted into the global.bib file.
# JabRef can generate a better cite key.
# The PDF of the current entry can be fetched and displayed in Emacs.
# The PDF can be saved with a the better cite key as the filename prefix.
#
# There are two commands for this page: M-x pubmed-search and M-x pubmed-advanced-search.
# The first returns the results in a buffer.
# There are also functions for sending the search to PubMed in the default buffer.
#
# https://gitlab.com/fvdbeek/emacs-pubmed
#
# #+BEGIN_SRC emacs-lisp
# (use-package pubmed
#   :ensure t
#   :commands (pubmed-search pubmed-advanced-search))
# #+END_SRC
#
# There are the following keybindings:
#
# - <kbd>RET</kbd>: Show the summary of the current entry.
# - <kbd>f</kbd>: Try to fetch the fulltext PDF of the current entry.
# - <kbd>m</kbd>: Mark the current entry.
# - <kbd>M</kbd>: Mark all entries.
# - <kbd>n</kbd>: Show the summary of the next entry.
# - <kbd>p</kbd>: Show the summary of the previous entry.
# - <kbd>q</kbd>: Quit window.
# - <kbd>s</kbd>: Search PubMed.
# - <kbd>u</kbd>: Unmark the current entry.
# - <kbd>U</kbd>: Unmark all entries.
# - <kbd>w</kbd>: Write the BibTeX references of the marked entries or current
#   entry to file.
# - <kbd>\<TAB\></kbd>: Show the BibTeX references of the marked entries or current
#   entry.
#
# s lanuches a search query.
# m marked an entry.
# f tries to fetch the PDF and opens it in Emacs in a new buffer.
# The file can be saved to whatever filename.
# The whitespace function is interfering with entering file paths in the minibuffer
#
# Note that there is a also a  major pubmed-mode that can cause some confusion.
#
# You need to get a API key from NCBI to make up to 10 requests per second.
# Otherwise your access will be limited to 3 requests per second.
# Get the API key via your NCBI account .
#
#
#
# #
# *** Python
#
# See the [[https://www.emacswiki.org/emacs/PythonProgrammingInEmacs][Emacs Wiki]] from more options.
# Also see the section abbove under org-babel for the use of ~emacs-jupyter~.
#
# Emacs has the built-in python-mode.
# Open a Python file in a buffer and enter ~C-c C-p~ to open a Python REPL with the default or set python interpreter.
#
# Alternatively, the conda package can be used to set the conda env.
# The command ~M-x conda-env-list~ will list the available conda envs.
#
#
# The package elpy used to be popular.
# This is well  [[https://elpy.readthedocs.io/en/latest/introduction.html][documented]].
# I am not sure where it stands now and if it is really needed.
# It is big on creating and using pyenvs.
#
# Run the following command \mintinline{bash}{pip install jedi rope flake8 yapf importmagic autopep8} oo the terminal.
#
# The config below is from [[https://github.com/kpurdon/.emacs.d/blob/main/development.el][here]]
#
# #+BEGIN_SRC emacs-lisp
# (use-package elpy
#   :init
#   (elpy-enable)
#   :config
#   ;; disable flymake and enable flycheck
#   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
#   ;; set the elpy rpc virtualenv path the current path
#   (setq elpy-rpc-virtualenv-path 'current))
#
# (use-package py-autopep8
#   :config
#   (setq py-autopep8-options '("--ignore=E501,W293,W391,W690"))
#   (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
#
# (use-package py-isort
#   :config
#   (add-hook 'before-save-hook 'py-isort-before-save))
# #+END_SRC
#
#
# The following is Dave Wilson's configuration for [[https://github.com/daviwil/emacs-from-scratch/blob/dd9320769f3041ac1edca139496f14abe147d010/Emacs.org#python][Python]].
# Python-mode should be built-in but lets upgrade to the latest version.
# You may need to install debugpy from PyPi.
# You may aslo need to install a python lsp.
# You may need to install dap-mode from MELPA.
#
#
# #+BEGIN_SRC emacs-lisp
# (setq python-shell-interpreter "/Users/blaine/opt/anaconda3/envs/cctbx39/bin/python")
# (use-package python-mode
#   :ensure t
#   :hook (python-mode . lsp-deferred)
#   :custom
#   ;; NOTE: Set these if Python 3 is called "python3" on your system!
#   (python-shell-interpreter "/Users/blaine/opt/anaconda3/envs/cctbx39/bin/python")
#   )
# (eval-after-load "company"
#  '(add-to-list 'company-backends '(company-anaconda :with company-capf)))
#
# (add-hook 'python-mode-hook 'anaconda-mode)
# (add-hook 'python-mode-hook 'electric-spacing-mode)
# (add-hook 'python-mode-hook 'blacken-mode)
# #+END_SRC
#
# C-c C-p will open a Python REPL in a buffer.
# C-c C-c will send run the code in the buffer to the REPL and return the output in the REPL.
#
#
# **** Use IPython for REPL
# #+BEGIN_SRC emacs-lisp
# (setq python-shell-interpreter "/Users/blaine/opt/anaconda3/envs/cctbx39/bin/jupyter"
#       python-shell-interpreter-args "console --simple-prompt"
#       python-shell-prompt-detect-failure-warning nil)
# (add-to-list 'python-shell-completion-native-disabled-interpreters
#              "/Users/blaine/opt/anaconda3/envs/cctbx39/bin/jupyter")
# #+END_SRC
#
#
# **** Enable Flycheck
# #+BEGIN_SRC emacs-lisp
# (when (require 'flycheck nil t)
#   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
#   (add-hook 'elpy-mode-hook 'flycheck-mode))
# #+END_SRC
#
#
# **** Enable Autopep8
# #+BEGIN_SRC emacs-lisp
# (require 'py-autopep8)
# (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
# #+END_SRC
#
#
# # **** Enable debugger for Python
# # #+BEGIN_SRC emacs-lisp
# # (dap-python-executable "python3")
# # (dap-python-debugger 'debugpy)
# # :config
# # (require 'dap-python)
# # #+END_SRC
#
#
#
# **** jedi
#
# Jedi.el is a Python auto-completion package.
# It helps you to find information about Python objects, such as docstring, function arguments, and code location.
# Source on GitHub [Jedi](http://tkf.github.io/emacs-jedi/latest/)
#
# #+BEGIN_SRC emacs-lisp
# (add-hook 'python-mode-hook 'jedi:setup)
# (setq jedi:complete-on-dot t)                 ; optional
# #+END_SRC
#
#
# **** pyenv
#
# The pyenv pacakge support the use of pyenv environments.
# See the conda configuration under C.
#
# #+BEGIN_SRC emacs-lisp
# (use-package pyvenv
#   :config
#   (pyvenv-mode 1))
# #+END_SRC
#
#
# **** python-x
#
# This package enhances the Python REPL experience.
# Open a Python file in a buffer and enter ~C-c C-p~ to open a Python REPL with the default or set python interpreter.
# You mark sections of your script file with ~## ---~ and then send one section to the REPL to run it by entering .
# The default section delimiter is ~## ---~ but can be changed via python-section-delimiter.
#
# #+BEGIN_SRC emacs-lisp
# (use-package python-x
#     :ensure t)
# (python-x-setup)
# (setq python-section-delimiter "##")
# #+END_SRC
#
#
# **** Running Python in LaTeX and Markdown documents
#
# The package [[emacs-ipython][https://github.com/burakbayramli/emacs-jupyter]] allows execution of Python code inside a LaTeX or MarkDown buffer.
# It displays the results as text or graphic in the section below.
# The packages uses [[https://github.com/pinard/Pymacs][Pymacs]] to connect to an ipython kernel to execute the code.
# Four additional Python packages are required.
# It is recommended that ~Pymacs~ be installed in a ~python_env~ and then the following bash script be run before using ~Pymacs~.
# Obtain PyMacs [[https://github.com/dgentry/Pymacs][here]].
#
# #+BEGIN_SRC bash
# #!/bin/bash
# source /some/dir/yourenv/bin/activate
# /usr/bin/emacs29
# #+END_SRC
#
#
# Add the following Emacs function to the ~config.org~ file.
#
# #+BEGIN_SRC emacs-lisp
# (defun reload-pymacs()
#   (interactive)
#   (if (buffer-live-p (get-buffer "*Pymacs*" ))
#       (kill-buffer (get-buffer "*Pymacs*")))
#   (message (buffer-file-name (current-buffer)))
#   ;;
#   ;; load tex or md mode based on the extension
#   (if (equal (file-name-extension (buffer-file-name (current-buffer))) "tex")
#       (progn
#     (pymacs-load "[INSTALL DIR]/ipython-tex")
#     (global-set-key "\M-," 'ipython-tex-run-py-code)
#     (global-set-key [f5] 'ipython-tex-complete-py)
#     (tempo-define-template
#      "tex-listings-python"
#      '("\\begin{minted}[fontsize=\\footnotesize]{python}\n"
#        (s)
#        "\n\\end{minted}\n"
#        )
#      "")
#     ))
#   (if (equal (file-name-extension (buffer-file-name (current-buffer))) "md")
#       (progn
#     (pymacs-load "[INSTALL DIR]/ipython-md")
#     (global-set-key "\M-," 'ipython-md-run-py-code)
#     (global-set-key [f5] 'ipython-md-complete-py)
#     (tempo-define-template
#      "tex-listings-python"
#      '("```python\n"
#        (s)
#        "\n```\n"
#        )
#      "")
#     ))
#
#   )
#
# (global-set-key [f1] 'tempo-template-tex-listings-python)
# (global-set-key [f11] 'reload-pymacs)
# #+END_SRC
#
#
# ** Q
#
# *** quarto-mode
#
#
# Source: \url{https://github.com/quarto-dev/quarto-emacs}
# #    #+BEGIN_COMMENT
# #+BEGIN_SRC emacs-lisp
# (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . poly-quarto-mode))
# (use-package quarto-mode
#   :ensure t
#   :mode (("\\.Rmd" . poly-quarto-mode))
#   )
# #+END_SRC
# #    #+END_COMMENT
#
#
# ** R
#
# *** ess-r-mode
#
# #+BEGIN_SRC emacs-lisp
# (use-package ess
#   :ensure t)
# #+END_SRC
#
#
# *** r-autoyas
#
# Enter C-g to delete the unused arguments in a R function call.
#
# #+BEGIN_SRC emacs-lisp
# (use-package r-autoyas
#     :ensure t)
# (add-hook 'ess-mode-hook 'r-autoyas-ess-activate)
# #+END_SRC
#
# *** R config by Federic Santoas
#
# [[See github repo][https://github.com/ess-intro/presentation-ess-customization/blob/main/tutorial/ess-init.el]] for a detailed tutorial.
# #+BEGIN_SRC emacs-lisp
# ;; Code visibility:
# (setq ess-eval-visibly 'nowait)
#
# ;; Font lock keywords for syntactic highlighting:
# (setq ess-R-font-lock-keywords
#       '((ess-R-fl-keyword:keywords . t)
#     (ess-R-fl-keyword:constants . t)
#     (ess-R-fl-keyword:modifiers . t)
#     (ess-R-fl-keyword:fun-defs . t)
#     (ess-R-fl-keyword:assign-ops . t)
#     (ess-R-fl-keyword:%op% . t)
#     (ess-fl-keyword:fun-calls . t)
#     (ess-fl-keyword:numbers . t)
#     (ess-fl-keyword:operators . t)
#     (ess-fl-keyword:delimiters . t)
#     (ess-fl-keyword:= . t)
#     (ess-R-fl-keyword:F&T . t)))
#
# ;; Activate global mode for parenthesis matching:
# (show-paren-mode)
#
# ;; Remove Flymake support:
# (setq ess-use-flymake nil)
# ;; Replace it (globally) by Flycheck:
# (use-package flycheck
#   :ensure t
#   :init
#   (global-flycheck-mode t))
#
# ;; Open Rdired buffer with F9:
# (add-hook 'ess-r-mode-hook
#       '(lambda ()
#          (local-set-key (kbd "<f9>") #'ess-rdired)))
# ;; Close Rdired buffer with F9 as well:
# (add-hook 'ess-rdired-mode-hook
#       '(lambda ()
#          (local-set-key (kbd "<f9>") #'kill-buffer-and-window)))
#
# ;; An example of window configuration:
# (setq display-buffer-alist
#       '(("*R Dired"
#      (display-buffer-reuse-window display-buffer-at-bottom)
#      (window-width . 0.5)
#      (window-height . 0.25)
#      (reusable-frames . nil))
#     ("*R"
#      (display-buffer-reuse-window display-buffer-in-side-window)
#      (side . right)
#      (slot . -1)
#      (window-width . 0.5)
#      (reusable-frames . nil))
#     ("*Help"
#      (display-buffer-reuse-window display-buffer-in-side-window)
#      (side . right)
#      (slot . 1)
#      (window-width . 0.5)
#      (reusable-frames . nil))))
# #+END_SRC
#
#
# ** S
#
# *** scala
#
# scala is a functional programming language that runs on the JVM.
# I installed scala using homebrew and cursive.
# Scala was installed in ~/Users/blaine/Library/Application\ Support/Coursier/bin/scala~.
# I installed scala3 and made an alias to it called ~scala3~ to avoid invoking ~scala~ from CCP4.
# [[https://github.com/hvesalai/emacs-scala-mode][source]]
#
# #+BEGIN_SRC emacs-lisp
# (use-package scala-mode
#   :interpreter
#     ("scala" . scala-mode))
# #+END_SRC
#
# sbt is a progam that manages the installation of scala.
# sbt can be installed with macports.
# I could not figure out where sbt installed scala.
# [[https://github.com/hvesalai/emacs-sbt-mode][source]]
#
# #+BEGIN_SRC emacs-lisp
# (use-package sbt-mode
#   :commands sbt-start sbt-command
#   :config
#   ;; WORKAROUND: allows using SPACE when in the minibuffer
#   (substitute-key-definition
#    'minibuffer-complete-word
#    'self-insert-command
#    minibuffer-local-completion-map))
# #+END_SRC
#
#
# # *** scholar-import
# #
# # [[Source][https://github.com/teeann/scholar-import]]
# #
# # You must install the Scholar to Emacs Chrome extension first.
# # You must have the paths to the global.bib file and the PDF folder defined elsewhere.
# # They are defined in the helm-bibtex configuration in my case.
# #
# # #+BEGIN_SRC emacs-lisp
# # (use-package scholar-import
# #   :after helm-bibtex
# #   :config
# #   ;; change accordingly if these bibtex variables are lists
# #   (setq scholar-import-bibliography bibtex-completion-bibliography
# #         scholar-import-library-path bibtex-completion-library-path))
# # #+END_SRC
#
#
# *** search
#
# Harry Schwartz wrote engine-mode to send selections to the browsers.
# He presented this at the [[https://www.youtube.com/watch?v=MBhJBMYfWUo][NYC-Emacs Meetup]] in 2015.
# He installed the package in MELPA.
# He has an informative README.md page [[https://github.com/hrs/engine-mode][on github]].
# The prefix is ~C-x \~.
#
# |-----+--------------------|
# | kdb | browser or webiste |
# |-----+--------------------|
# | d   | duckduckgo         |
# | m   | emdb               |
# | p   | epdb               |
# | h   | github             |
# | g   | google             |
# | s   | googlescholar      |
# | i   | iucr               |
# | l   | pymolmailinglist   |
# | w   | pymolwiki          |
# | r   | rcsb               |
# | g   | researchgate       |
# | o   | stackoverlfow      |
# | k   | wikipeadia         |
# | y   | wiktionary         |
# | u   | youtube            |
#
# #+BEGIN_SRC emacs-lisp
# (use-package engine-mode)
# (require 'engine-mode)
#
# (defengine duckduckgo
#   "https://duckduckgo.com/?q=%s"
#   :keybinding "d")
#
# (defengine emdb
#   "https://www.ebi.ac.uk/pdbe/emdb/=%s"
#   :keybinding "m")
#
# (defengine epdb
#   "https://www.ebi.ac.uk/pdbe/=%s"
#   :keybinding "e")
#
# (defengine github
#   "https://github.com/search?ref=simplesearch&q=%s"
#   :keybinding "h")
#
# (defengine google
#   "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
#   :keybinding "g")
#
# (defengine googlescholar
#   "https://scholar.google.se/scholar?hl=en&q=%s"
#   :keybinding "s")
#
# (defengine iucr
#   "https://scripts.iucr.org/cgi-bin/full_search=%s"
#   :keybinding "i")
#
# (defengine pymolmailinglist
#   "https://sourceforge.net/p/pymol/mailman/search/?q=%s"
#   :keybinding "l")
#
# (defengine pymolwiki
#   "https://pymolwiki.org/index.php/=%s"
#   :keybinding "w")
#
# (defengine rcsb
#   "https://www.rcsb.org/structure/=%s"
#   :keybinding "r")
#
# (defengine researchgate
#   "https://www.researchgate.net/search.Search.html?type=researcher&query=%s"
#   :keybinding "g")
#
# (defengine stack-overflow
#   "https://stackoverflow.com/search?q=%s"
#   :keybinding "o")
#
# (defengine wikipedia
#   "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
#   :keybinding "k")
#
# (defengine wiktionary
#   "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s"
#   :keybinding "y")
#
# (defengine youtube
#   "https://www.youtube.com/results?search_query=%s"
#   :keybinding "u")
#
# (engine-mode t)
# #+END_SRC
#
#
#
# *** sentence trailing whitespace
#
# Emacs expects two whitespaces at the end of each sentence.
# This is an archaic practice from the typewriter days before the 1980s.
# To enforce the use of one whitespace, enter the following:
#
# #+BEGIN_SRC emacs-lisp
# (setq sentence-end-double-space nil)
#
# ;; always delete trailing whitespace on save
# (add-hook 'before-save-hook 'delete-trailing-whitespace)
#
# ;; make the default movement within words (e.g. someThing, some_thing, some-thing)
# ;; http://ergoemacs.org/emacs/emacs_subword-mode_superword-mode.html
# (add-hook 'prog-mode-hook 'subword-mode)
#
# ;; only highlight mispelling for strings and comments
# (add-hook `prog-mode-hook 'flyspell-prog-mode)
# #+END_SRC
#
#
# *** SLIME
#
# slime stands for Superior Lisp Interaction Mode for Emacs.
# I already had sbcl installed.
# It provides a repl for Commn Lisp.
# There are about a dozen lisp systems.
# I use sbcl.
# I had installed it with macports.
#
# I had installed earlier the quicklisp package in sbcl.
# However, I had to install a slime helper.
# I entered sbcl and issued the following command.
#
#
# #+BEGIN_SRC common-lisp
# (ql:quickload "quicklisp-slime-helper")
# #+END_SRC
#
#
# #+BEGIN_SRC emacs-lisp
# ;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
# (setq inferior-lisp-program "/opt/local/bin/sbcl")
# #+END_SRC
#
#
#
# *** Spelling
#
# **** Set the spelling binary
#
# #+BEGIN_SRC emacs-lisp
# (setq ispell-program-name "/opt/local/bin/aspell")
# #+END_SRC
#
#
# *** super-agenda-org
#
# Enable by entering ~M-x super-agenda-org-mode~.
# [[https://github.com/alphapapa/org-super-agenda][Documentation is found on the github site]]
#
#
# # +BEGIN_SRC emacs-lisp
# # (use-package org-super-agenda
# #   :ensure t)
# # (let ((org-super-agenda-groups
# #        '(;; Each group has an implicit boolean OR operator between its selectors.
# #          (:name "Today"  ; Optionally specify section name
# #                 :time-grid t  ; Items that appear on the time grid
# #                 :todo "TODAY")  ; Items that have this TODO keyword
# #          (:name "Important"
# #                 ;; Single arguments given alone
# #                 :tag "bills"
# #                 :priority "A")
# #          ;; Set order of multiple groups at once
# #          (:order-multi (2 (:name "Shopping in town"
# #                                  ;; Boolean AND group matches items that match all subgroups
# #                                  :and (:tag "shopping" :tag "@town"))
# #                           (:name "Food-related"
# #                                  ;; Multiple args given in list with implicit OR
# #                                  :tag ("food" "dinner"))
# #                           (:name "Personal"
# #                                  :habit t
# #                                  :tag "personal")
# #                           (:name "Space-related (non-moon-or-planet-related)"
# #                                  ;; Regexps match case-insensitively on the entire entry
# #                                  :and (:regexp ("space" "NASA")
# #                                                ;; Boolean NOT also has implicit OR between selectors
# #                                                :not (:regexp "moon" :tag "planet")))))
# #          ;; Groups supply their own section names when none are given
# #          (:todo "WAITING" :order 8)  ; Set order of this section
# #          (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
# #                 ;; Show this group at the end of the agenda (since it has the
# #                 ;; highest number). If you specified this group last, items
# #                 ;; with these todo keywords that e.g. have priority A would be
# #                 ;; displayed in that group instead, because items are grouped
# #                 ;; out in the order the groups are listed.
# #                 :order 9)
# #          (:priority<= "B"
# #                       ;; Show this section after "Today" and "Important", because
# #                       ;; their order is unspecified, defaulting to 0. Sections
# #                       ;; are displayed lowest-number-first.
# #                       :order 1)
# #          ;; After the last group, the agenda will display items that didn't
# #          ;; match any of these groups, with the default order position of 99
# #          )))
# #      (org-agenda nil "a"))
# # +END_SRC
#
#
#
# *** stan
#
# Five stan-related packages.
#
# #+BEGIN_SRC emacs-lisp
# ;;; stan-mode.el
# (use-package stan-mode
#   :ensure t
#   :mode ("\\.stan\\'" . stan-mode)
#   :hook (stan-mode . stan-mode-setup)
#   ;;
#   :config
#   ;; The officially recommended offset is 2.
#   (setq stan-indentation-offset 2))
#
# ;;; company-stan.el
# (use-package company-stan
#   :ensure t
#   :hook (stan-mode . company-stan-setup)
#   ;;
#   :config
#   ;; Whether to use fuzzy matching in `company-stan'
#   (setq company-stan-fuzzy nil))
#
# ;;; eldoc-stan.el
# (use-package eldoc-stan
#   :ensure t
#   :hook (stan-mode . eldoc-stan-setup)
#   ;;
#   :config
#   ;; No configuration options as of now.
#   )
#
# ;;; flycheck-stan.el
# (use-package flycheck-stan
#   :ensure t
#   ;; Add a hook to setup `flycheck-stan' upon `stan-mode' entry
#   :hook ((stan-mode . flycheck-stan-stanc2-setup)
#          (stan-mode . flycheck-stan-stanc3-setup))
#   :config
#   ;; A string containing the name or the path of the stanc2 executable
#   ;; If nil, defaults to `stanc2'
#   (setq flycheck-stanc-executable nil)
#   ;; A string containing the name or the path of the stanc2 executable
#   ;; If nil, defaults to `stanc3'
#   (setq flycheck-stanc3-executable nil))
#
# ;;; stan-snippets.el
# (use-package stan-snippets
#   :ensure t
#   :hook (stan-mode . stan-snippets-initialize)
#   ;;
#   :config
#   ;; No configuration options as of now.
#   )
#
# ;;; ac-stan.el (Not on MELPA; Need manual installation)
# (use-package ac-stan
#   :ensure t
#   :load-path "path-to-your-directory/ac-stan/"
#   ;; Delete the line below if using.
#   :disabled t
#   :hook (stan-mode . stan-ac-mode-setup)
#   ;;
#   :config
#   ;; No configuration options as of now.
#   )
# #+END_SRC
#
#
#
# ** T
#
# *** tab-bar-mode
#
# [[https://mmk2410.org/2022/02/11/using-emacs-tab-bar-mode/][tab-bar-mode]] looks cool.
# I will follow-up later.
#
# *** terminals
#
# There are four options: term-mode, vterm-mode, eshell-mode, and shell-mode.
#
#
# **** term-mode
# *term-mode* gives a nearly native experience in an Emacs buffer.
# It has two modes: line-mode versus char-mode.
# line-mode enables normal Emacs keybindings while moving around in the terminal buffer.
# char-mode sends most  keypresses to the underlying terminal.
# Use char-mode for any terminal applications that have their own keybindings.
# line-mode is sufficient when just using the terminal.
#
# Invoke with ~M-x term!~
#
# **** Useful keybindings:
#
# - ~C-c C-p / C-c C-n~ - go back and forward in the buffer’s prompts (also [[ and ]] with evil-mode)
# - ~C-c C-k~ - Enter char-mode
# - ~C-c C-j~ - Return to line-mode
#
#
# #+BEGIN_SRC emacs-lisp
# (use-package term
#   :config
#   (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
#   (setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args
#
#   ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
#   (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
# #+END_SRC
#
# Use 256 colors when in the term-mode.
#
# #+BEGIN_SRC emacs-lisp
# (use-package eterm-256color
#   :hook (term-mode . eterm-256color-mode))
# #+END_SRC
#
#
#
#
#
# *** vterm
#
# *vterm* is an improved terminal emulator package that is faster than term-mode.
# It uses a compiled native module to interact with the underlying terminal applications.
# It provides a more complete terminal emulation experience.
# On the MacOS, I was able to install it in Emacs29 from MELPA.
# I ran ~M-x vterm-compile~ and it was compiled with Apple's clang.
# Then I was able to invoke ~vterm~.
# There is a julia-vterm.
#
# #+BEGIN_SRC emacs-lisp
# (use-package vterm
#   :commands vterm
#   :config
#   (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
#   (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
#   (setq vterm-max-scrollback 10000))
# #+END_SRC
#
#
# *** eshell
#
# *eshell* doubles as a Lisp interpreter.
# You get what looks like a terminal prompt but you can enter ~(* 400 4000)~ and get 1600000 returned to the minibuffer.
# Very cool!
# Eshell can be harder to configure than other packages due to where you need to set some options for them to go into effect, the shell completions for some commands are lacking by default, and REPL programs sometimes fail to work.
#
# There is an eshell-julia package.
#
# **** Useful keybindings
#
# - ~C-c C-p / C-c C-n~ - go back and forward in the buffer’s prompts (also [[ and ]] with evil-mode)
# - ~M-p / M-n~ - go back and forward in the input history
# - ~C-c C-u~ - delete the current input string backwards to the cursor
# - ~counsel-shell-history~ - A searchable history of commands typed into the shell
#
#
# #+BEGIN_SRC emacs-lisp
# (defun efs/configure-eshell ()
#   ;; Save command history when commands are entered
#   (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
#
#   ;; Truncate buffer for performance
#   (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
#
#   ;; Bind some useful keys for evil-mode
#   (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
#   (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
#   (evil-normalize-keymaps)
#
#   (setq eshell-history-size         10000
#         eshell-buffer-maximum-lines 10000
#         eshell-hist-ignoredups t
#         eshell-scroll-to-bottom-on-input t))
#
# (use-package eshell-git-prompt)
#
# (use-package eshell
#   :hook (eshell-first-time-mode . efs/configure-eshell)
#   :config
#
#   (with-eval-after-load 'esh-opt
#     (setq eshell-destroy-buffer-when-process-dies t)
#     (setq eshell-visual-commands '("htop" "zsh" "vim")))
#
#   (eshell-git-prompt-use-theme 'powerline))
# #+END_SRC
#
#
# *** shell
#
# *shell-mode* is between term-mode and Eshell in its nature.
# It is not a terminal emulator;  complex terminal programs will not run in it.
# However, *shell-mode* has much better integration with Emacs because all command input in this mode is handled by Emacs.
# Emacs sends the commands to the underlying shell once you press Enter.
# As a result, you can use evil-mode’s editing motions on the command line, unlike term-mode and vterm.
# *shell-mode* is the only way to run on Windows cmd.exe, PowerShell, Git, Bash, etc from within Emacs.
#
# **** Useful keybindings
#
# - ~C-c C-p / C-c C-n~ - go back and forward in the buffer’s prompts (also [[ and ]] with evil-mode)
# - ~M-p / M-n~ - go back and forward in the input history
# - ~C-c C-u~ - delete the current input string backward up to the cursor
# - ~counsel-shell-history~ - A searchable history of commands typed into the shell
#
#
# #+BEGIN_SRC emacs-lisp
# (when (eq system-type 'windows-nt)
#   (setq explicit-shell-file-name "powershell.exe")
#   (setq explicit-powershell.exe-args '()))
# #+END_SRC
#
#
# **** iterm extensions
#
# There is an iterm.el package.
#
#
# *** String infleciton (snake_case -> UPCASE -> )
#
# Place cursor at the compound word and enter C-q C-u repeatedly to cycle
# through the alternatives.
#
# [[https://github.com/akicho8/string-inflection][Source]]
#
# #+BEGIN_SRC emacs-lisp
# (use-package string-inflection
#   :ensure t
# )
#
# (global-unset-key (kbd "C-q"))
# (global-set-key (kbd "C-q C-u") 'my-string-inflection-cycle-auto)
#
# (defun my-string-inflection-cycle-auto ()
#   "switching by major-mode"
#   (interactive)
#   (cond
#    ;; for emacs-lisp-mode
#    ((eq major-mode 'emacs-lisp-mode)
#     (string-inflection-all-cycle))
#    ;; for python
#    ((eq major-mode 'python-mode)
#     (string-inflection-python-style-cycle))
#    ;; for java
#    ((eq major-mode 'java-mode)
#     (string-inflection-java-style-cycle))
#    ;; for elixir
#    ((eq major-mode 'elixir-mode)
#     (string-inflection-elixir-style-cycle))
#    (t
#     ;; default
#     (string-inflection-java-style-cycle))))
# #+END_SRC
#+END_COMMENT


** T
*** Timers
Use the pomodoto.app. It is hard to beat.


*** themes

#+BEGIN_COMMENT
**** leuven-theme
The leuven-theme has high color contrast on light background.
#+BEGIN_SRC emacs-lisp
(use-package leuven-theme
  :init (load-theme 'leuven t))
#+END_SRC
#+END_COMMENT

**** ef-theme from Prot
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.default30/elisp/ef-themes")

(require 'ef-themes)
;; If you like two specific themes and want to switch between them, you
;; can specify them in `ef-themes-to-toggle' and then invoke the command
;; `ef-themes-toggle'.  All the themes are included in the variable
;; `ef-themes-collection'.
(setq ef-themes-to-toggle '(ef-summer ef-winter))

;; Make customisations that affect Emacs faces BEFORE loading a theme
;; (any change needs a theme re-load to take effect).

(setq ef-themes-headings ; read the manual's entry or the doc string
      '((0 . (variable-pitch light 1.9))
        (1 . (variable-pitch light 1.8))
        (2 . (variable-pitch regular 1.7))
        (3 . (variable-pitch regular 1.6))
        (4 . (variable-pitch regular 1.5))
        (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
        (6 . (variable-pitch 1.3))
        (7 . (variable-pitch 1.2))
        (t . (variable-pitch 1.1))))

;; They are nil by default...
(setq ef-themes-mixed-fonts t
      ef-themes-variable-pitch-ui t)

;; Disable all other themes to avoid awkward blending:
(mapc #'disable-theme custom-enabled-themes)

;; Load the theme of choice:
(load-theme 'ef-summer :no-confirm)

;; The themes we provide:
;;
;; Light: `ef-day', `ef-light', `ef-spring', `ef-summer'.
;; Dark:  `ef-autumn', `ef-dark', `ef-night', `ef-winter'.
;;
;; Also those which are optimized for deuteranopia (red-green color
;; deficiency): `ef-deuteranopia-dark', `ef-deuteranopia-light'.

;; We also provide these commands, but do not assign them to any key:
;;
;; - `ef-themes-toggle'
;; - `ef-themes-select'
;; - `ef-themes-load-random'
;; - `ef-themes-preview-colors'
;; - `ef-themes-preview-colors-current'#+END_SRC
#+END_SRC


** U


** V


*** Vegalite

Take vega-lite plots as png files rather than svg.

#+BEGIN_SRC emacs-lisp
(setq vega-view-prefer-png t)
#+END_SRC



** W

*** wc-mode

This is a minor mode that provides the wc function that returns line, word, and character counts for the current buffer.


#+BEGIN_SRC emacs-lisp
(use-package wc-mode)
(add-hook 'text-mode-hook 'wc-mode)
;; Suggested setting
(global-set-key "\C-cw" 'wc-mode)
#+END_SRC



*** Word count by section

Only works in LaTeX documents.

#+BEGIN_SRC emacs-lisp
(defun latex-word-count ()
  (interactive)
  (shell-command (concat "/usr/local/bin/texcount.pl"))
  (buffer-file-name))
#+END_SRC





*** wolfram-mode

The wolfram language runs the Mathematica software.

#+begin_src emacs-lisp
(autoload 'wolfram-mode "wolfram-mode" nil t)
  (autoload 'run-wolfram "wolfram-mode" nil t)
  (setq wolfram-program "/Applications/Mathematica.app/Contents/MacOS/MathKernel")
   (add-to-list 'auto-mode-alist '("\\.m$" . wolfram-mode))
  (setq wolfram-path "direcotry-in-Mathematica-$Path")  ;; e.g. on Linux "~/.Mathematica/Applications"
#+end_src


** X

*** xah-lookup (web lookup launched from Emacs)

[[http://ergoemacs.org/emacs/xah-lookup.html][Source]]
You have to pay $15 for this package, but it is worth it.
xah-lookup-X for the built-in commands.
my-lookup-X are my extensions.


|-------------------------------+-------------|
| Command                       | key-binding |
|-------------------------------+-------------|
|xah-lookup-wikipedia           | C-h 5       |
|xah-lookup-web                 | C-h 7       |
|xah-lookup-wikitionary         | C-h 6       |
|xah-lookup-google              |             |
|xah-lookup-word-dict-org       | C-h 2       |
|xah-lookup-all-dictionaries    |             |
|xah-lookup-all-etymology       | C-h 1       |
|xah-lookup-word-definition     | C-h 9       |
|xah-lookup--asciify-region     |             |
|xah-lookup-word-on-internet    |             |
|-------------------------------+-------------|
|my-lookup-github               | C-h C-g     |
|my-lookup-julia                | C-h C-j     |
|my-lookup-pymol                | C-h C-m     |
|my-lookup-juliapackages        | C-h C-o     |
|my-lookup-pubmed               | C-h C-b     |
|my-lookup-jstor                | C-h C-t     |
|my-lookup-connect              | C-h C-c     |
|my-lookup-matplotlib           | C-h C-l     |
|my-lookup-python               | C-h C-p     |
|my-lookup-r                    | C-h C-r     |
|my-lookup-scholar              | C-h C-s     |
|my-lookup-wikipedia            | C-h C-w     |
|my-lookup-wolframalpha         | C-h C-a     |
|my-lookup-cctbx                | C-h C-x     |
|my-lookup-tensorfolw           | C-h C-f     |
|my-lookup-pdbj                 | C-h C-f     |
|-------------------------------+-------------|


The curlicue below is a placeholder for the lookup word query string.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.default/elisp/lookup-word-on-internet")
(require 'xah-lookup)
(define-key help-map (kbd "7") 'xah-lookup-web) ; C-h 7
(global-set-key (kbd "<f2>") 'xah-lookup-wikipedia) ; F2

(defun my-lookup-cctbx (&optional @word)
  "Lookup cctbx documentation of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-cctbx 'xah-lookup-url )
   (get 'my-lookup-cctbx 'xah-lookup-browser-function )))

(put 'my-lookup-cctbx 'xah-lookup-url "https://cctbx.github.io/search.html?q=curlicue")
(put 'my-lookup-cctbx 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-github (&optional @word)
  "Lookup github documentation of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-github 'xah-lookup-url )
   (get 'my-lookup-github 'xah-lookup-browser-function )))

(put 'my-lookup-github 'xah-lookup-url "https://github.com/search?q==curlicue")
(put 'my-lookup-github 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-jstor (&optional @word)
  "Lookup jstor documentation of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-jstor 'xah-lookup-url )
   (get 'my-lookup-jstor 'xah-lookup-browser-function )))

(put 'my-lookup-jstor 'xah-lookup-url "https://www.jstor.org/action/doBasicSearch?Query=curlicue")
(put 'my-lookup-jstor 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-julia (&optional @word)
  "Lookup cctbx documentation of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-julia 'xah-lookup-url )
   (get 'my-lookup-julia 'xah-lookup-browser-function )))

(put 'my-lookup-julia 'xah-lookup-url "https://docs.julialang.org/en/v1/search/?q=curlicue")
(put 'my-lookup-julia 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-juliapackages (&optional @word)
  "Lookup cctbx documentation of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-juliapackages 'xah-lookup-url )
   (get 'my-lookup-juliapackages 'xah-lookup-browser-function )))

(put 'my-lookup-juliapackages 'xah-lookup-url "https://juliapackages.com/packages?search=curlicue")
(put 'my-lookup-juliapackages 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-connect (&optional @word)
  "lookup connected papers of word under cursor"
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-connect 'xah-lookup-url )
   (get 'my-lookup-connect 'xah-lookup-browser-function )))

(put 'my-lookup-connect 'xah-lookup-url "https://www.connectedpapers.com/search?q=curlicue")
(put 'my-lookup-connect 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-matplotlib (&optional @word)
  "lookup connected papers of word under cursor"
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-matplotlib 'xah-lookup-url )
   (get 'my-lookup-matplotlib 'xah-lookup-browser-function )))

(put 'my-lookup-connect 'xah-lookup-url "https://matplotlib.org/stable/search.html?q=curlicue")
(put 'my-lookup-connect 'xah-lookup-browser-function 'browse-url)



(defun my-lookup-php (&optional @word)
  "lookup php doc of word under cursor"
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-php 'xah-lookup-url )
   (get 'my-lookup-php 'xah-lookup-browser-function )))

(put 'my-lookup-php 'xah-lookup-url "https://us.php.net/curlicue")
(put 'my-lookup-php 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-pubmed (&optional @word)
  "Lookup cctbx documentation of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-pubmed 'xah-lookup-url )
   (get 'my-lookup-pubmed 'xah-lookup-browser-function )))

(put 'my-lookup-pubmed 'xah-lookup-url "https://pubmed.ncbi.nlm.nih.gov/?term=curlicue")
(put 'my-lookup-pubmed 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-pymol (&optional @word)
  "Lookup cctbx documentation of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-pymol 'xah-lookup-url )
   (get 'my-lookup-pymol 'xah-lookup-browser-function )))

(put 'my-lookup-pymol 'xah-lookup-url "https://pymol.org/dokuwiki/doku.php?do=search&id=curlicue")
(put 'my-lookup-pymol 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-python (&optional @word)
  "Lookup Python.org doc of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-python 'xah-lookup-url )
   (get 'my-lookup-python 'xah-lookup-browser-function )))

(put 'my-lookup-python 'xah-lookup-url "https://www.python.org/search/?q=curlicue")
(put 'my-lookup-python 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-r (&optional @word)
  "Lookup R documentation of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-r 'xah-lookup-url )
   (get 'my-lookup-r 'xah-lookup-browser-function )))

(put 'my-lookup-r 'xah-lookup-url "https://www.rdocumentation.org/search?q=curlicue")
(put 'my-lookup-r 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-scholar (&optional @word)
  "Lookup Goolge Scholar doc of word under cursor"
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-scholar 'xah-lookup-url )
   (get 'my-lookup-scholar 'xah-lookup-browser-function )))

(put 'my-lookup-scholar 'xah-lookup-url "https://scholar.google.com/scholar?hl=en&as_sdt=0%2C37&q=curlicue")
(put 'my-lookup-scholar 'xah-lookup-browser-function 'browse-url)


# (defun my-lookup-wikipedia (&optional @word)
  "Lookup wikipedia doc of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-wikipedia 'xah-lookup-url )
   (get 'my-lookup-wikipedia 'xah-lookup-browser-function )))

(put 'my-lookup-wikipedia 'xah-lookup-url "https://en.wikipedia.org/wiki/curlicue")
(put 'my-lookup-wikipedia 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-wolframalpha (&optional @word)
  "Lookup wolframalpha doc of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-wolframalpha 'xah-lookup-url )
   (get 'my-lookup-wolframalpha 'xah-lookup-browser-function )))

(put 'my-lookup-wolframalpha 'xah-lookup-url "https://www.wolframalpha.com/input/?i=curlicue")
(put 'my-lookup-wolframalpha 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-pdbj (&optional @word)
  "Lookup wolframalpha doc of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-pdbj 'xah-lookup-url )
   (get 'my-lookup-pdbj 'xah-lookup-browser-function )))

(put 'my-lookup-pdbj 'xah-lookup-url "https://pdbj.org/search/pdb?query=curlicue")
(put 'my-lookup-pdbj 'xah-lookup-browser-function 'browse-url)


(defun my-lookup-pdbj (&optional @word)
  "Lookup wolframalpha doc of word under cursor."
  (interactive)
  (require 'xah-lookup)
  (xah-lookup-word-on-internet
   @word
   (get 'my-lookup-tensorfolw 'xah-lookup-url )
   (get 'my-lookup-tensorfolw 'xah-lookup-browser-function )))

(put 'my-lookup-tensorfolw 'xah-lookup-url "https://www.tensorflow.org/s/results/?q=curlicue")
(put 'my-lookup-tensorfolw 'xah-lookup-browser-function 'browse-url)


(define-key help-map (kbd "\C-g") 'my-lookup-github) ; C-h C-g
(define-key help-map (kbd "\C-j") 'my-lookup-julia) ; C-h C-j
(define-key help-map (kbd "\C-m") 'my-lookup-pymol) ; C-h C-m
(define-key help-map (kbd "\C-o") 'my-lookup-juliaobserver) ; C-h C-o
(define-key help-map (kbd "\C-b") 'my-lookup-pubmed) ; C-h C-b
(define-key help-map (kbd "\C-t") 'my-lookup-jstor) ; C-h C-t
(define-key help-map (kbd "\C-c") 'my-lookup-connect) ; C-h C-c
(define-key help-map (kbd "\C-l") 'my-lookup-matplotlib) ; C-h C-l
(define-key help-map (kbd "\C-p") 'my-lookup-python) ; C-h C-p
(define-key help-map (kbd "\C-r") 'my-lookup-r) ; C-h C_r
(define-key help-map (kbd "\C-s") 'my-lookup-scholar) ; C-h C- s
(define-key help-map (kbd "\C-w") 'my-lookup-wikipedia) ; C-h C-w
(define-key help-map (kbd "\C-a") 'my-lookup-wolframalpha) ; C-h C-a
(define-key help-map (kbd "\C-x") 'my-lookup-cctbx) ; C-h C-x
(define-key help-map (kbd "\C-f") 'my-lookup-tensorfolw) ; C-h C-f
(define-key help-map (kbd "\C-d") 'my-lookup-pdbj) ; C-h C-f
(put 'narrow-to-region 'disabled nil)
#+END_SRC

*** xah-reformat-to-sentence-lines

This function rewrites paragraphs with one line per sentence.
With one sentence per line, it is easy to shuffle the sentences when rewriting a paragraph.
This also supports reverse outling well.
You undo this reformatting by entering ~M-q~.

This function fails where there is a period insde of a sentence, such as with the initials in a full name.

~M-q~ adds two whitespaces at the end of each sentence because by default, Emacs expects two whitespaces at the end of each sentence.
This is an archaic practice.
To enforce the use of one whitespace, enter ~(setq sentence-end-double-space nil)~.
I have set this above under S.


#+BEGIN_SRC emacs-lisp
(defun xah-reformat-to-sentence-lines ()
  "Break a long line or text block into multiple lines by ending period.
Work on text selection if there is one, else the current text block.
URL `http://xahlee.info/emacs/emacs/elisp_reformat_to_sentence_lines.html'
Version 2020-12-02 2021-04-14 2021-08-01"
  (interactive)
  (let ($p1 $p2)
    (if (use-region-p)
        (setq $p1 (region-beginning) $p2 (region-end))
      (progn
        (if (re-search-backward "\n[ \t]*\n+" nil "move")
            (progn (re-search-forward "\n[ \t]*\n+")
                   (setq $p1 (point)))
          (setq $p1 (point)))
        (re-search-forward "\n[ \t]*\n" nil "move")
        (setq $p2 (point))))
     (save-restriction
       (narrow-to-region $p1 $p2)
       (progn (goto-char (point-min)) (while (search-forward "\n" nil t) (replace-match " " )))
       (progn (goto-char (point-min)) (while (re-search-forward "  +" nil t) (replace-match " " )))
       (progn (goto-char (point-min)) (while (re-search-forward "\\. +\\([0-9A-Za-z]+\\)" nil t) (replace-match ".\n\\1" )))
       (progn (goto-char (point-min)) (while (search-forward " <a " nil t) (replace-match "\n<a " )))
       (progn (goto-char (point-min)) (while (search-forward "</a>" nil t) (replace-match "</a>\n" )))
       (goto-char (point-max))
       (while (eq (char-before ) 32) (delete-char -1))
       (insert "\n\n"))))
#+END_SRC

** Y

*** Yasnippet

This is the snippet manager.
It has a nice table view of the snippets available for the current mode and a function for automating the writing of new snippets.

**** main configuration
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1)
;; Turn on yasnippet (minor) mode when editing R files:
   (add-hook 'ess-r-mode-hook #'yas-minor-mode)
   (add-hook 'markdown-mode-hook #'yas-minor-mode)
   (add-hook 'poly-gfm+r-mode#'yas-minor-mode)
   (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . R-mode))
   (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . ess-r-mode))
   (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . poly-gfm+r-mode))
   :bind
   ("C-c y i" . yas-insert-snippet)
   ("C-c y n" . yas-new-snippet)
)

;;  (use-package yasnippet-snippets)
#+END_SRC

**** Resolving tab ambiguity

(Source: https://blog.iany.me/2012/03/fix-tab-binding-for-yasnippet-and-auto-complete/)
Emacs has two TAB’s in Emacs: (kbd "TAB") (\t, [9]) and (kbd "<tab>") ([tab]). 
Modes like yasnippet and auto-complete want to bind on TAB.
Their trigger key must be the same with the original Tab command. 
Emacs binds indent-for-tab-command on (kbd "TAB").
Yasnippet binds to it by default.
You can etup auto-complete to trigger using Tab.


#+BEGIN_SRC emacs-lisp
;; trigger using TAB and disable auto start
(custom-set-variables
 '(ac-trigger-key "TAB")
 '(ac-auto-start nil)
 '(ac-use-menu-map t))
#+END_SRC


In some modes (ruby-mode, markdown-mode, org-mode), the command is bound to (kbd "<tab>")).
When the real Tab key is typed, the function bound on (kbd "<tab>) has higher priority, so yasnippet and auto-complete are not invoked.
The following code resolves this issue:

#+BEGIN_SRC emacs-lisp
(defun iy-tab-noconflict ()
  (let ((command (key-binding [tab]))) ; remember command
    (local-unset-key [tab]) ; unset from (kbd "<tab>")
    (local-set-key (kbd "TAB") command))) ; bind to (kbd "TAB")
(add-hook 'ruby-mode-hook 'iy-ac-tab-noconflict)
(add-hook 'markdown-mode-hook 'iy-ac-tab-noconflict)
(add-hook 'org-mode-hook 'iy-ac-tab-noconflict)
#+END_SRC

#+BEGIN_COMMENT
***** Function to insert a fence code block

Source:

#+BEGIN_SRC emacs-lisp
(defun tws-insert-r-chunk (header)
  "Insert an r-chunk in markdown mode."
  (insert (concat "```{r " header "}\n\n```"))
  (forward-line -1))
;;(global-set-key "\C-f \C-f" 'tws-insert-r-chunk)
;;(markdown-mode-map (kbd "C-p C-f") 'tws-insert-r-chunk)
#+END_SRC
#+END_COMMENT

**** keybinding to insert snippet

Insert snippet with C-o. This normally mapped to TAB.

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-o" 'yas-expand)
#+END_SRC

**** Tab triggers in org code blocks
Enable snippet tab triggers to work in the native code language of the code block.

#+BEGIN_SRC emacs-lisp
(setq   org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-edit-src-content-indentation 0)
#+END_SRC


**** Turn off org-mode snippets in code blocks.

#+BEGIN_SRC emacs-lisp
(defun my-org-mode-hook ()
  (setq-local yas-buffer-local-condition
             '(not (org-in-src-block-p t))))
  'my-org-mode-hook
  (add-hook 'org-mode-hook `my-org-mode-hook)
#+END_SRC


**** Yasnippet pop-up menu to aid snippet selection

See this [[https://blog.iany.me/2012/03/use-popup-isearch-for-yasnippet-prompt/][Blogpost]] about the pop-up menu


#+BEGIN_SRC emacs-lisp
(require 'popup)
;; (require 'yasnippet)
;; add some shotcuts in popup menu mode
(define-key popup-menu-keymap (kbd "M-n") 'popup-next)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
(define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
(define-key popup-menu-keymap (kbd "M-p") 'popup-previous)

(defun yas/popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t
     )))
(setq yas/prompt-functions '(yas/popup-isearch-prompt yas/no-prompt))
#+END_SRC


**** Automatically trigger completion at each snippet tabstop

#+BEGIN_COMMENT
#+BEGIN_SRC emacs-lisp
(defun complete-if-yas-field (&rest _)
  (let ((field (yas-current-field)))
    (when (and field
               (not (yas--field-modified-p field)))
      (company-manual-begin))))

(advice-add 'company-complete-selection :after 'complete-if-yas-field)
(advice-add 'yas-next-field :after 'complete-if-yas-field)
#+END_SRC
#+END_COMMENT

** Z


*** Zetteldesk
#+NAME: Zetteldesk

Zetteldesk provides a buffer for gathering the zettels related to an article.
It integrates with [[#org-roam]].
It was developed by a fourth year chemical engineering student in Greece, Vidianos Giannitsis, who has been using Emacs for 2.5 years. 
He gave a [[https://emacsconf.org/2022/talks/science/][talk]] about his workflow at emacsconf 2022 on December 3.
The ethernet and IRC chat have yet to be archived. 
The zetteldesk was at the end of his workflow.
An audience member suggested a FOSS [[https://jermolene.com/cecily/][project]] and a proprietry [[https://www.napkin.one/][project]] where objects could be sorted on a webpage.

His [[https://github.com/Vidianos-Giannitsis/zetteldesk.el][project]] is in MELPA and on GitHub 
He had provided an extensive [[https://github.com/Vidianos-Giannitsis/zetteldesk.el/wiki][Github]] website with 11 pages that explain his workflow in more depth.
Note that his approach using Zotero.
His reference zettel capture template is more complex than mine.

Zetteldesk seems to be redundant with the artilce zettel.
It would be cool to be able to export the collected zettels to a format that could be imported into iThoughtsX for reorganizing.

From the etherpad discussion of his talk: 
``The Koutliner in the GNU Hyperbole package can be used for this where all notes would be organized, autonumbered and automatically have a per-file unique hyperanchor ID. 
You can move notes/ideas around the same way you do in Org outlines. 
Besides collapsing and expanding trees of notes, you can also clip the view to a particular number of lines per note for overviews. 
It supports Org tables too.''

The workflow and configuration for the other packages in the workflow are of greater interest to me.

#+BEGIN_SRC emacs-lisp
(require 'zetteldesk)
(zetteldesk-mode 1)
(setq zetteldesk-kb-hydra-prefix (kbd "C-c z"))
(require 'zetteldesk-kb)
(require 'zetteldesk-ref)
(require 'zetteldesk-info)
(require 'zetteldesk-remark)

(pretty-hydra-define+ zetteldesk-insert-hydra ()
  ("Org-Roam"
   (("r" zetteldesk-ref-citar-insert-ref-node-contents "Link to citekey and Node Contents in *zetteldesk-scratch with special formatting"))))

(pretty-hydra-define zetteldesk-literature-hydra (:color blue :title "Zetteldesk Literature Nodes")
  ("Org-Roam UI"
   (("r" zetteldesk-ref-find-ref-node))

   "Citar UI"
   (("c" zetteldesk-ref-citar-open-note))))

(pretty-hydra-define+ zetteldesk-add-hydra ()
  ("Org-Roam"
   (("l" zetteldesk-ref-citar-add-node-to-desktop "Add Literature Node"))))

(pretty-hydra-define+ zetteldesk-remove-hydra ()
  ("Org-Roam"
   (("l" zetteldesk-ref-citar-remove-node-from-desktop "Remove Literature Node"))))

(pretty-hydra-define+ zetteldesk-main-hydra ()
  ("Filter Functions"
   (("l" zetteldesk-literature-hydra/body "Go to Zetteldesk Literature Node"))))
#+END_SRC
